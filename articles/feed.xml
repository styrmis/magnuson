<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Stefan Magnuson</title>
  <subtitle>Articles on Ruby development and bootstrapping</subtitle>
  <id>https://stefan.magnuson.co/articles</id>
  <link href="https://stefan.magnuson.co/articles"/>
  <link href="https://stefan.magnuson.co/articles/feed.xml" rel="self"/>
  <updated>2016-09-02T00:00:00+01:00</updated>
  <author>
    <name>Stefan Magnuson</name>
  </author>
  <entry>
    <title>Notes on the use of Staging Environments on Heroku</title>
    <link rel="alternate" href="https://stefan.magnuson.co/articles/devops/notes-on-staging-environments-on-heroku/"/>
    <id>https://stefan.magnuson.co/articles/devops/notes-on-staging-environments-on-heroku/</id>
    <published>2016-09-02T00:00:00+01:00</published>
    <updated>2016-09-02T13:22:31+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;The setup and use of a separate staging environment is covered (almost)
adequately by &lt;a href="https://devcenter.heroku.com/articles/fork-app"&gt;Heroku&amp;rsquo;s documentation on the matter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And yet I must be missing something, as forking my app didn&amp;rsquo;t do what I
expected.&lt;/p&gt;

&lt;p&gt;In forking a running production app to create a staging clone environment what I
expected to have afterwards was:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Heroku app called &lt;code&gt;appname-staging&lt;/code&gt;, running the same version of the
application&lt;/li&gt;
&lt;li&gt;A newly-created hobby-dev Postgres instance containing the production data&lt;/li&gt;
&lt;li&gt;That the staging app should be targeting the new staging database, i.e.
&lt;code&gt;DATABASE_URL&lt;/code&gt; for &lt;code&gt;appname-staging&lt;/code&gt; should be set to the URL of the
newly-created database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The staging app appeared to be working exactly as expected. There was a new
database which contained a copy of the production database, the staging app was
running the right version of the code at the appropriate URL, and it appeared to
be a perfect clone of production.&lt;/p&gt;

&lt;p&gt;Unbelievably (for me at least), the &lt;code&gt;DATABASE_URL&lt;/code&gt; of the new staging app was
set to point to the production database, including credentials. Staging was
masquerading as a perfect clone of production because it was in fact pointing to
the production database.&lt;/p&gt;

&lt;p&gt;Here is the relevant portion of the Heroku documentation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is recommended to make sure if you have an expected Heroku Postgres setup
with your target app. Please run heroku pg:info and/or heroku config command
to make sure that everything has copied as you expected. If the copied
database is not being the primary database (DATABASE_URL), use heroku
pg:promote as described by the Heroku Postgres documentation to make it a
primary database.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It does not inspire confidence that this important caveat is not highlighted
more clearly, and the concepts involved not explained in more detail. In what
case would we ever want to fork an app, and have it pointing at the live
production database?&lt;/p&gt;

&lt;p&gt;Another potentially important caveat, while we are &lt;em&gt;forking&lt;/em&gt; the app, the
database will be &lt;em&gt;copied&lt;/em&gt;, i.e. the database will not be &lt;em&gt;forked&lt;/em&gt; using the
provided &lt;em&gt;fork&lt;/em&gt; feature. This lack of clarity has likely tripped up enough
people for them to warrant adding another warning to the documentation page.&lt;/p&gt;

&lt;p&gt;I have not found these issues discussed much (or at all) online, so I can only
assume that I am one of the few who has fallen foul of this. Still, if you are
experimenting with staging environments on Heroku then I would recommend
checking and double-checking the config of the new app (as they do indeed
suggest). Heroku reduces many complex hosting-related concerns to simple
commands and it&amp;rsquo;s easy to get used to that, but it seems that not all of these
commands receive the same polish and attention.&lt;/p&gt;

&lt;p&gt;Final caveat (hopefuly) is that Heroku will not necessarily use the same
Postgres version: my production 9.3 database was cloned to a new instance
running Postgres 9.5.&lt;/p&gt;

&lt;h2&gt;Resolving the issue&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Double and triple-check all commands before running them&amp;ndash;the point of
the article is that Heroku&amp;rsquo;s simple tooling can make it equally simple to
compromise your production deployment.&lt;/p&gt;

&lt;h3&gt;The Situation&lt;/h3&gt;

&lt;p&gt;You have run Heroku&amp;rsquo;s &lt;code&gt;fork&lt;/code&gt; command and now have a clone of your production
app, but its &lt;code&gt;DATABASE_URL&lt;/code&gt; is still pointing to that of production.&lt;/p&gt;

&lt;p&gt;First, take a fresh backup of production before continuing:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;% heroku pg:backups capture -a production-app-name&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;% curl `heroku pg:backups public-url -a production-app-name` -o `date +5Y5m5d`.pgbackup&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With a backup safely stored, we look at the configuration of each application:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;% heroku config -a production-app-name | grep URL
DATABASE_URL:               postgres://user_a:password@ec2-host1.eu-west-1.compute.amazonaws.com:5432/db_identifier1
HEROKU_POSTGRESQL_ROSE_URL: postgres://user_a:password@ec2-host1.eu-west-1.compute.amazonaws.com:5432/db_identifier1
% heroku config -a staging-app-name | grep URL
DATABASE_URL:               postgres://user_a:password@ec2-host1.eu-west-1.compute.amazonaws.com:5432/db_identifier1
HEROKU_POSTGRESQL_ROSE_URL: postgres://user_b:password@ec2-host2.eu-west-1.compute.amazonaws.com:5432/db_identifier2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the staging app has a new &lt;code&gt;ROSE&lt;/code&gt; database URL, and yet its
&lt;code&gt;DATABASE_URL&lt;/code&gt; is still pointing directly at production.&lt;/p&gt;

&lt;p&gt;In the remaining configuration items, new credentials have been automatically
set for New Relic, Papertrail and other add-ons, but for some reason not for the
all-important &lt;code&gt;DATABASE-URL&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;The Solution&lt;/h3&gt;

&lt;p&gt;As per &lt;a href="https://devcenter.heroku.com/articles/heroku-postgresql#establish-primary-db"&gt;Heroku&amp;rsquo;s docs on the
matter&lt;/a&gt;,
we need to &lt;em&gt;promote&lt;/em&gt; the newly-created staging database to be the primary
database for the app:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;% heroku pg:promote HEROKU_POSTGRESQL_ROSE_URL -a staging-app-name
Ensuring an alternate alias for existing DATABASE... done, not needed
Promoting postgresql-addon-id to DATABASE_URL on staging-app-name... done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now confirm that the production configuration has not changed, and the
staging configuration now has &lt;code&gt;DATABASE_URL&lt;/code&gt; pointing at the new staging
database, and &lt;strong&gt;not&lt;/strong&gt; our production database:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;% heroku config -a production-app-name | grep URL
DATABASE_URL:               postgres://user_a:password@ec2-host1.eu-west-1.compute.amazonaws.com:5432/db_identifier1
HEROKU_POSTGRESQL_ROSE_URL: postgres://user_a:password@ec2-host1.eu-west-1.compute.amazonaws.com:5432/db_identifier1
% heroku config -a staging-app-name | grep URL
DATABASE_URL:               postgres://user_b:password@ec2-host2.eu-west-1.compute.amazonaws.com:5432/db_identifier2
HEROKU_POSTGRESQL_ROSE_URL: postgres://user_b:password@ec2-host2.eu-west-1.compute.amazonaws.com:5432/db_identifier2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Updating the staging database&lt;/h2&gt;

&lt;p&gt;At some point you will want to refresh the data in staging. This can be achieved
using the &lt;code&gt;pg:copy&lt;/code&gt; command, though the first time through the output of the
command will likely give you pause for thought:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;% heroku pg:copy production-app-name::ROSE staging-app-name::ROSE --app staging-app-name

 !    WARNING: Destructive Action
 !    This command will remove all data from ROSE
 !    Data from ROSE will then be transferred to ROSE
 !    This command will affect the app: staging-app-name
 !    To proceed, type "staging-app-name or re-run this command with --confirm staging-app-name

&amp;gt; ^C !    Command cancelled.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I could find clear guidance on how I should go about changing the colour name
of my staging database I would do so, to avoid the unpleasant ambiguity in the
destructive action warning.&lt;/p&gt;

&lt;p&gt;For now, the fact that I am explicitly targetting the staging app &lt;em&gt;should&lt;/em&gt;
protect the production environment, though as we have seen this protection can
easily be bypassed by the &lt;code&gt;fork&lt;/code&gt; command as it shares the &lt;code&gt;DATABASE_URL&lt;/code&gt; between
the apps.&lt;/p&gt;

&lt;p&gt;Allow the command to run and hopefully you should now have an up-to-date staging
database.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Kinesis Freestyle 2 Keyboard Review</title>
    <link rel="alternate" href="https://stefan.magnuson.co/articles/programming/kinesis-freestyle-2-keyboard-review/"/>
    <id>https://stefan.magnuson.co/articles/programming/kinesis-freestyle-2-keyboard-review/</id>
    <published>2016-03-06T00:00:00+00:00</published>
    <updated>2016-03-06T17:51:36+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;First Impressions&lt;/h2&gt;

&lt;p&gt;First impression upon unboxing the keyboard is that all of the reviews that I
had read were out of date&amp;ndash;Kinesis have clearly paid attention to feedback and
some of the gripes that I had read about (e.g. having a browser &amp;lsquo;home&amp;rsquo; hotkey,
making the insert function require the pressing of &lt;em&gt;fn&lt;/em&gt;) had been addressed.&lt;/p&gt;

&lt;p&gt;As such, the keyboard layout is easily standard enough to allow for a smooth
transition from a regular keyboard (Apple wired and wireless keyboards) to the
Kinesis&amp;ndash;thus far I have not experienced any real slowdown in typing speed.&lt;/p&gt;

&lt;p&gt;I will update this review after having used the keyboard for some months, but my
first impression of the keyboard has been great. The touch is extremely light,
the adjustability via the VIP3 attachment makes a pleasing difference, but most
of all the typing experience is simply much more enjoyable than the wireless
Apple keyboard, which requires that you keep your hands close together all day.&lt;/p&gt;

&lt;p&gt;So far the only downside is that the escape key is an absurdly long way from the
home row. I have sorted this in Vim by mapping other keys to escape however, so
this is not a big deal.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Using the ES7 Spread Operator with Webpack</title>
    <link rel="alternate" href="https://stefan.magnuson.co/articles/frontend/using-es7-spread-operator-with-webpack/"/>
    <id>https://stefan.magnuson.co/articles/frontend/using-es7-spread-operator-with-webpack/</id>
    <published>2016-02-05T00:00:00+00:00</published>
    <updated>2016-02-05T12:53:54+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;The Problem&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m currently evaluating Redux as a means to tidy up a React app, and in
following the examples in the docs came across the spread operator (&lt;code&gt;...&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;In the following code the spread operator copies in all of the keys and values
of the existing state, and allows us to extend it with a new value for &lt;code&gt;bold&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const comment = (state, action) =&amp;gt; {
  switch (action.type) {
    case 'COMMENT_TOGGLE_BOLD ':
      return {
        ...state,
        bold: !state.bold
      }
    default:
      return state
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Problem is, while I have set up Webpack 6 to succesfully transpile and bundle
JSX and ES6 (ES2015), it fails to recognise this use of the spread operator as
at time of writing it is still in the proposal stage:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Module build failed: SyntaxError: /.../assets/js/reducers/comments.js:
Unexpected token (9:8)
   7 |
   8 |       return {
&amp;gt;  9 |         ...state,
     |         ^
  10 |         bold: !state.bold
  11 |       }
  12 |     default:
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;A Quick Solution&lt;/h2&gt;

&lt;p&gt;The quickest solution I found to resolve this, after trying to add in specific
plugins like &lt;code&gt;transform-object-rest-spread&lt;/code&gt;, was to enable the &lt;code&gt;stage-2&lt;/code&gt; preset:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save babel-preset-stage-2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then in &lt;code&gt;webpack.config.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module: {
  loaders: [
    {
      test: /\.jsx?$/,
      exclude: /node_modules/,
      loader: 'babel-loader',
      query: {
        presets:[ 'es2015', 'react', 'stage-2' ]
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be aware that the additional operators and behaviour which this preset brings in
may be subject to change&amp;ndash;in this case I think the benefits of the spread
operator in reducing boilerplate override those concerns, as the operator
semantics appear likely to become standard before long.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Reinstalling MySQL on OSX using Homebrew</title>
    <link rel="alternate" href="https://stefan.magnuson.co/articles/osx/reinstalling-mysql-on-osx-with-homebrew/"/>
    <id>https://stefan.magnuson.co/articles/osx/reinstalling-mysql-on-osx-with-homebrew/</id>
    <published>2016-01-28T00:00:00+00:00</published>
    <updated>2016-01-28T10:46:09+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;If you find that you need to have a particular version of MySQL installed on
your OSX machine (e.g. to match the version running in production) but you
already have a different version of MySQL installed via Homebrew, then the notes
below may help you to replace the installed version with the one you need.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DISCLAIMER:&lt;/strong&gt; The following instructions involve the complete removal of the
existing MySQL installation, including any databases. Proceed with caution, and
double check every command&amp;ndash;this is just meant to be a rough guide to an
approach you can take to achieve the desired result.&lt;/p&gt;

&lt;h2&gt;Uninstalling&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Check &lt;code&gt;~/Library/LaunchAgents&lt;/code&gt;, if &lt;code&gt;homebrew.mxcl.mysql.plist&lt;/code&gt; is present then:

&lt;ol&gt;
&lt;li&gt;Unload: &lt;code&gt;launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Remove: &lt;code&gt;rm ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Stop the MySQL server process: &lt;code&gt;sudo mysql.server stop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brew remove mysql&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brew cleanup&lt;/code&gt; (note that this command will clean up after more than just MySQL)&lt;/li&gt;
&lt;li&gt;Remove if present:

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;/usr/local/var/mysql&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Reinstalling&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Select the version that you want to install (in my case, &lt;code&gt;5.5.x&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brew tap homebrew/versions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brew install mysql55&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Follow the post-install instructions as provided by the &lt;code&gt;brew install&lt;/code&gt; output&lt;/li&gt;
&lt;li&gt;Add the appropriate directoy to your &lt;code&gt;PATH&lt;/code&gt;, e.g. &lt;code&gt;/usr/local/opt/mysql55/bin&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Post-install instructions&lt;/h3&gt;

&lt;p&gt;Yours may differ from the below.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;To have launchd start homebrew/versions/mysql55 at login:
  ln -sfv /usr/local/opt/mysql55/*.plist ~/Library/LaunchAgents
Then to load homebrew/versions/mysql55 now:
  launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mysql55.plist
Or, if you don't want/need launchctl, you can just run:
  /usr/local/opt/mysql55/bin/mysql.server start

WARNING: launchctl will fail when run under tmux.
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Robust Integration Testing in Rails 4 with RSpec, Capybara and Selenium</title>
    <link rel="alternate" href="https://stefan.magnuson.co/articles/rails/robust-integration-testing-in-rails-4-with-rspec-capybara-and-selenium/"/>
    <id>https://stefan.magnuson.co/articles/rails/robust-integration-testing-in-rails-4-with-rspec-capybara-and-selenium/</id>
    <published>2014-08-20T00:00:00+01:00</published>
    <updated>2015-10-10T21:28:38+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;The Problem&lt;/h2&gt;

&lt;p&gt;Using RSpec and Capybara to test your Rails apps can make writing tests easier
which is good both from a perspective of getting people to actually write tests
but also for our general productivity as developers.&lt;/p&gt;

&lt;p&gt;While it has its detractors, I like the terse syntax and ease with which we can
define our own helpers which help set up certain contexts such as in this case
setting up the default account and switching into its subdomain:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;feature&lt;/span&gt; &lt;span class="s2"&gt;"Onboarding"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:js&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;with_default_account&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;within_account_subdomain&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="no"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create_default_services&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="n"&gt;scenario&lt;/span&gt; &lt;span class="s2"&gt;"User can complete onboarding process"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;visit&lt;/span&gt; &lt;span class="n"&gt;dashboard_path&lt;/span&gt;

        &lt;span class="c1"&gt;# User is redirected&lt;/span&gt;
        &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;current_path&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getting_started_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;fill_in&lt;/span&gt; &lt;span class="s2"&gt;"Name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;with: &lt;/span&gt;&lt;span class="s2"&gt;"New Service XYZ"&lt;/span&gt;
        &lt;span class="n"&gt;click_button&lt;/span&gt; &lt;span class="s2"&gt;"Create Service"&lt;/span&gt;

        &lt;span class="c1"&gt;# ...&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Those helpers can be used in any test, which eliminates repeated setup code
between test cases. Then from Capybara we get a simple but powerful DSL which
lets us &lt;code&gt;visit&lt;/code&gt; pages, &lt;code&gt;fill_in&lt;/code&gt; forms and interact as if we were a user
(&lt;code&gt;click_button&lt;/code&gt;, &lt;code&gt;click_link&lt;/code&gt;). This is an attractive mix and it isn&amp;rsquo;t hard to
see why this has caught on.&lt;/p&gt;

&lt;p&gt;The testing setup that ships with Rails is also perfectly capable but generally
I prefer this syntax and workflow. One great advantage that the standard testing
setup (using &lt;code&gt;Test::Unit&lt;/code&gt;) has over RSpec however is &lt;strong&gt;support&lt;/strong&gt;&amp;ndash;quite simply
when you write your tests using &lt;code&gt;Test::Unit&lt;/code&gt; and the default Rails helpers you
will be in good company and can expect minimum fuss. As the Rails core team
advance the test harness then you can also benefit from out-of-the-box
improvements like Spring, which will cut app startup time out of the test
running equation.&lt;/p&gt;

&lt;p&gt;When you move to RSpec however, and start mixing in things like Capybara,
FactoryGirl (for fixtures) and Selenium then you are entering potentially
uncharted territory, in particular because your app may have something unusual
about it that causes your tests to fail, perhaps mysteriously.&lt;/p&gt;

&lt;p&gt;One way to look at the argument between the two approaches is that if you work
with Rails on a contract/consulting basis then having familiarity with both is
going to be advantageous&amp;ndash;if you work only on your own projects then the choice
is entirely up to you.&lt;/p&gt;

&lt;p&gt;In this post I&amp;rsquo;m going to step through the several roadblocks that I have
encountered in setting up the above tools such that they all work together
correctly and reliably. In doing so I will attempt to keep the setup as simple
as possible, and minimise the use of blunt instruments like &lt;code&gt;database_cleaner&lt;/code&gt;&amp;rsquo;s
truncation strategy.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Given how many moving parts there are here (the majority from 3rd
parties), for future projects I will be experimenting with sticking to the stock
Rails test framework to measure approximately the difference in productivity.
The tests may (or may not!) take longer to write, but I would expect some gains
from the reduction in lost time due to needing to fix the test harness.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;An additional complication that I have is that I am testing a subdomain-based
multi-tenant system&amp;ndash;this is something that is not well documented when it comes
to RSpec and particularly Capybara so if you are in a similar situation then the
following should hopefully be of use to you.&lt;/p&gt;

&lt;p&gt;The roadblocks I have hit are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Database inconsistencies when running a mix of plain and Javascript/Selenium
tests.&lt;/li&gt;
&lt;li&gt;Assets (CSS/JS) not being served in Selenium tests.&lt;/li&gt;
&lt;li&gt;The requesting of assets causing RSpec/Capybara to hang, with no hint as to
what is wrong.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The setup:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rspec-rails 2.14.2&lt;/li&gt;
&lt;li&gt;capybara 2.4.1&lt;/li&gt;
&lt;li&gt;selenium-webdriver 2.42.0&lt;/li&gt;
&lt;li&gt;factory&lt;em&gt;girl&lt;/em&gt;rails 4.4.1&lt;/li&gt;
&lt;li&gt;database_cleaner 1.3.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The characteristics that we want the setup to have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Running a test in a real browser should be as simple as specifying &lt;code&gt;:js&lt;/code&gt; for
a feature or scenario.&lt;/li&gt;
&lt;li&gt;Tests should pass/fail reliably, not sporadically, i.e. there should be no
race conditions.&lt;/li&gt;
&lt;li&gt;All tests will be carried out using a single tenant&amp;ndash;we are testing the
application functionality; the multi-tenant aspect of the system will be
handled by a completely separate set of tests as mixing the two in one suite is
more trouble than it&amp;rsquo;s worth.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;The Solution&lt;/h2&gt;

&lt;h3&gt;Gemfile&lt;/h3&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="ss"&gt;:development&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:test&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'rspec-rails'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'2.14.2'&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'capybara'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'2.4.1'&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'selenium-webdriver'&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'factory_girl_rails'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'~&amp;gt; 4.0'&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'database_cleaner'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'1.3.0'&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Spec Helper&lt;/h3&gt;

&lt;p&gt;Here is a full spec helper file (which should live in &lt;code&gt;spec/spec_helper.rb&lt;/code&gt;); I
would recommend reading the comments and incorporating the settings as
appropriate (i.e. don&amp;rsquo;t copy and paste this whole file into your project):&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# This file is copied to spec/ when you run 'rails generate rspec:install'&lt;/span&gt;
&lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"RAILS_ENV"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="s1"&gt;'test'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expand_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"../../config/environment"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;__FILE__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rspec/rails'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rspec/autorun'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'capybara'&lt;/span&gt;

&lt;span class="c1"&gt;# Requires supporting ruby files with custom matchers and macros, etc,&lt;/span&gt;
&lt;span class="c1"&gt;# in spec/support/ and its subdirectories.&lt;/span&gt;
&lt;span class="no"&gt;Dir&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"spec/support/**/*.rb"&lt;/span&gt;&lt;span class="p"&gt;)].&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Checks for pending migrations before tests are run.&lt;/span&gt;
&lt;span class="c1"&gt;# If you are not using ActiveRecord, you can remove this line.&lt;/span&gt;
&lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;check_pending!&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;defined?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="c1"&gt;# Remove this when upgrading to RSpec 3&lt;/span&gt;
  &lt;span class="c1"&gt;# Allows us to write just `:js` instead of `js: true` in tests&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;treat_symbols_as_metadata_keys_with_true_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;

  &lt;span class="c1"&gt;# Remove this line if you're not using ActiveRecord or ActiveRecord&lt;/span&gt;
&lt;span class="n"&gt;fixtures&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fixture_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;root&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/spec/fixtures"&lt;/span&gt;

  &lt;span class="c1"&gt;# If you're not using ActiveRecord, or you'd prefer not to run each of&lt;/span&gt;
&lt;span class="n"&gt;your&lt;/span&gt;
  &lt;span class="c1"&gt;# database_cleaner below&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;use_transactional_fixtures&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;

  &lt;span class="c1"&gt;# If true, the base class of anonymous controllers will be inferred&lt;/span&gt;
  &lt;span class="c1"&gt;# automatically. This will be the default behavior in future versions of&lt;/span&gt;
  &lt;span class="c1"&gt;# rspec-rails.&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;infer_base_class_for_anonymous_controllers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;

  &lt;span class="c1"&gt;# Run specs in random order to surface order dependencies. If you find an&lt;/span&gt;
  &lt;span class="c1"&gt;# order dependency and want to debug it, you can fix the order by&lt;/span&gt;
&lt;span class="n"&gt;providing&lt;/span&gt;
  &lt;span class="c1"&gt;# the seed, which is printed after each run.&lt;/span&gt;
  &lt;span class="c1"&gt;#     --seed 1234&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"random"&lt;/span&gt;

  &lt;span class="c1"&gt;# Insist on 'expect' syntax rather than 'should'&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expect_with&lt;/span&gt; &lt;span class="ss"&gt;:rspec&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;syntax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:expect&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:suite&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;# First, in case the database contains data from a previous run (e.g.&lt;/span&gt;
    &lt;span class="c1"&gt;# from a run that crashed), run a full clean using the truncation&lt;/span&gt;
    &lt;span class="c1"&gt;# strategy.&lt;/span&gt;
    &lt;span class="no"&gt;DatabaseCleaner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;clean_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:truncation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# *** The following is specific to this project&lt;/span&gt;
    &lt;span class="c1"&gt;#     Here we set up the default tenant to be used in each test&lt;/span&gt;

    &lt;span class="c1"&gt;# Drop the default tenant if it exists&lt;/span&gt;
    &lt;span class="no"&gt;Apartment&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PracticeManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;DEFAULT_TENANT_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;rescue&lt;/span&gt;
&lt;span class="kp"&gt;nil&lt;/span&gt;

    &lt;span class="c1"&gt;# Create the default tenant&lt;/span&gt;
    &lt;span class="n"&gt;default_account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Subscriptions&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="ss"&gt;:"Test Customer
#1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;subdomain: &lt;/span&gt;&lt;span class="no"&gt;PracticeManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;DEFAULT_TENANT_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;default_account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create_schema&lt;/span&gt;

    &lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Subscriptions&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;email: &lt;/span&gt;&lt;span class="s2"&gt;"customer@example.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="ss"&gt;password: &lt;/span&gt;&lt;span class="s2"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;password_confirmation: &lt;/span&gt;&lt;span class="s2"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;default_account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;
    &lt;span class="n"&gt;default_account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save!&lt;/span&gt;

    &lt;span class="n"&gt;default_account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;users&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;default_account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;owner&lt;/span&gt;

    &lt;span class="c1"&gt;# *** End of project-specific portion&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:each&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;# If the test is a Javascript test, set the strategy to truncation&lt;/span&gt;
    &lt;span class="c1"&gt;# as transactional cleaning will not work due to the test runner&lt;/span&gt;
    &lt;span class="c1"&gt;# and app not sharing the same process when testing from a browser.&lt;/span&gt;
    &lt;span class="c1"&gt;# For non-Javascript tests use the transaction strategy as it is faster.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:js&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="no"&gt;DatabaseCleaner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;strategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:truncation&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="no"&gt;DatabaseCleaner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;strategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:transaction&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="no"&gt;DatabaseCleaner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;

    &lt;span class="c1"&gt;# Before each test, switch into the schema of the default tenant&lt;/span&gt;
    &lt;span class="no"&gt;Apartment&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PracticeManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;DEFAULT_TENANT_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;after&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:each&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="no"&gt;DatabaseCleaner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;clean&lt;/span&gt;
    &lt;span class="no"&gt;Apartment&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reset&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# Load FactoryGirl helpers&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include&lt;/span&gt; &lt;span class="no"&gt;FactoryGirl&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Syntax&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Methods&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Explicitly set the test server process to a particular port&lt;/span&gt;
&lt;span class="c1"&gt;# so that we can access it directly at will.&lt;/span&gt;
&lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;server_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;

&lt;span class="c1"&gt;# To ensure that browser tests can find the test server process,&lt;/span&gt;
&lt;span class="c1"&gt;# always include the port number in URLs.&lt;/span&gt;
&lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;always_include_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;

&lt;span class="c1"&gt;# For all tests except Javascript tests we will use :rack_test&lt;/span&gt;
&lt;span class="c1"&gt;# (the default) as it is the fastest. For Javascript tests we will&lt;/span&gt;
&lt;span class="c1"&gt;# use Selenium as it is the most robust/mature browser driver&lt;/span&gt;
&lt;span class="c1"&gt;# available.&lt;/span&gt;
&lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;javascript_driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:selenium&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Database Cleaner&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;database_cleaner&lt;/code&gt; gem feels intuitively like an unpleasant hack, but with
the right configuration it can work in such a way that we only change the test
runner behaviour slightly for JS tests.&lt;/p&gt;

&lt;p&gt;It is well known that once you are using Factory Girl and/or browser testing
then you will want to stop using transactional fixtures as they won&amp;rsquo;t work as
expected:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;use_transactional_fixtures&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, when cleaning up after tests it is common to use the cleaner&amp;rsquo;s
&lt;code&gt;truncation&lt;/code&gt; strategy after browsers tests and the &lt;code&gt;transaction&lt;/code&gt; strategy
(basically the same as that enabled by &lt;code&gt;config.use_transactional_fixtures&lt;/code&gt;) for
all other tests.&lt;/p&gt;

&lt;p&gt;Many tutorials and StackOverflow answers out there have JS and non-JS tests
mixed together, with the strategy being switched between &lt;code&gt;transaction&lt;/code&gt; and
&lt;code&gt;truncation&lt;/code&gt; on each test.&lt;/p&gt;

&lt;p&gt;In my experience this has resulted in database access race conditions that have
caused otherwise well-written, independent tests to fail intermittently.&lt;/p&gt;

&lt;p&gt;The solution I have settled on is to run all non-JS tests first (shuffled), and
then all JS tests (also shuffled). This allows for discovery of tests that
incorrectly expect certain state, or fail to clean up after themselves (by
virtue of the random execution order), while not attempting to freely mix JS and
non-JS tests. As these different classes of test have different purposes, I see
no disadvantage in this approach, with the exception of it being somewhat
non-standard.&lt;/p&gt;

&lt;p&gt;In RSpec 3 we would be able to provide our own ordering scheme to achieve this,
but as we are still on RSpec 2 this needs to be set up outside of the spec
helper.&lt;/p&gt;

&lt;p&gt;First, in &lt;code&gt;.rspec&lt;/code&gt; we set the default runner to exclude all Javascript tests:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;--color --tag ~js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;(We also colour all output)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now when we run &lt;code&gt;rspec&lt;/code&gt; in the shell it will run all tests not marked with
&lt;code&gt;:js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To run our browser tests, we now need to run &lt;code&gt;rspec --tag js&lt;/code&gt;. While this could
perhaps be seen as inconvenient, I find this preferable as generally I am not
looking to run the (very slow) browser tests unless I am working on a
Javascript-based feature, or I am committing code.&lt;/p&gt;

&lt;p&gt;I have a git pre-commit hook which handles the running of both suites of tests,
and only allows the commit to go ahead if both suites pass.&lt;/p&gt;

&lt;p&gt;In a file symlinked to &lt;code&gt;.git/hooks/pre-commit&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="c"&gt;# Based on&lt;/span&gt;
http://codeinthehole.com/writing/tips-for-using-a-git-pre-commit-hook/

clean_up_and_exit &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  git stash pop -q
  &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# Run all tests and ensure that they pass before continuing&lt;/span&gt;
git stash -q --keep-index

rspec --tag ~js
&lt;span class="nv"&gt;RESULT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$RESULT&lt;/span&gt; -ne 0 &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; clean_up_and_exit 1

rspec --tag js
&lt;span class="nv"&gt;JS_RESULT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$JS_RESULT&lt;/span&gt; -ne 0 &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; clean_up_and_exit 1

&lt;span class="c"&gt;# All tests passed&lt;/span&gt;
clean_up_and_exit 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So in general I&amp;rsquo;ll be running individual test files as I work, and then before
committing I will be sure to exercise the whole test suite.&lt;/p&gt;

&lt;h4&gt;Why Selenium?&lt;/h4&gt;

&lt;p&gt;Initially I was using the
&lt;a href="https://github.com/thoughtbot/capybara-webkit"&gt;capybara-webkit&lt;/a&gt; gem to allow
for headless testing but unfortunately ran into some sporadic errors/hangs which
were hard to nail down.&lt;/p&gt;

&lt;p&gt;Running the tests without a live browsers instance is both faster, easier to
integrate with a CI server and has the advantage of not popping up windows on
your machine when testing. That said, as my primary goal here is to set up the
most reliable test harness I have gone for Selenium as the driver as it is a
more mature offering by virtue of it having been in production use for longer.&lt;/p&gt;

&lt;h4&gt;FactoryGirl&lt;/h4&gt;

&lt;p&gt;FactoryGirl makes generating test data trivially easy, but it also makes tests
unpredictable if the cleanup of this data is not handled appropriately.&lt;/p&gt;

&lt;p&gt;By completely separating our JS and non-JS test suites, and using the
&lt;code&gt;truncation&lt;/code&gt; strategy for DatabaseCleaner on JS tests we get the best of both
worlds: JS tests are run cleanly with no database-related race conditions, and
all other tests run as quickly as possible using the &lt;code&gt;transaction&lt;/code&gt; strategy.&lt;/p&gt;

&lt;h4&gt;Multi-tenant / Subdomain Testing&lt;/h4&gt;

&lt;p&gt;The multi-tenant aspect of the system is provided by a Rails engine,
custom-built for the purpose of managing accounts, users, authentication and
scoping of data based on the current subdomain. The engine has its own test
suite which exercises this logic and tests the data scoping in particular. The
test suite runs on &lt;code&gt;rack_test&lt;/code&gt; only.&lt;/p&gt;

&lt;p&gt;When testing, FactoryGirl is used to create multiple accounts, each with their
own subdomain and database (or schema, in the case of Postgres).&lt;/p&gt;

&lt;p&gt;Initially when testing the behaviour of the host application I continued with
this approach. Now however, to greatly simplify the testing process, all tests
&lt;strong&gt;for the host app&lt;/strong&gt; (and not the engine) run against a single default tenant.&lt;/p&gt;

&lt;p&gt;One of the key reasons for doing this is to avoid needing to resolve potentially
hundreds of subdomains to &lt;code&gt;localhost&lt;/code&gt; when running browser tests. In &lt;code&gt;rack_test&lt;/code&gt;
it doesn&amp;rsquo;t matter that &lt;code&gt;customer20.example.com&lt;/code&gt; doesn&amp;rsquo;t resolve as it doesn&amp;rsquo;t
resolve names by DNS in the first place.&lt;/p&gt;

&lt;p&gt;When using Selenium however the address must resolve. Setting up a local DNS
server like &lt;code&gt;dnsmasq&lt;/code&gt; is one option, but now your development and test
environments need to have this external software installed and running. An
alternative could be to use &lt;a href="http://pow.cx"&gt;Pow&lt;/a&gt;, which I am already using for
development, to automatically resolve all subdomains at an appropriate &lt;code&gt;.dev&lt;/code&gt;
domain.&lt;/p&gt;

&lt;p&gt;While both approaches work, both would behave erratically on occasion. The
solution in the case of Pow was to upgrade to the latest version, but this
highlighted the fragility of the approach. With &lt;code&gt;dnsmasq&lt;/code&gt; again you have a
fragile solution that could break the next time you update your OS, making it
undesirable too.&lt;/p&gt;

&lt;p&gt;By sticking to the one tenant in all tests, all that needs to be done to have
browser tests work is to map the one tenant domain to &lt;code&gt;localhost&lt;/code&gt; in
&lt;code&gt;/etc/hosts&lt;/code&gt;, e.g. &lt;code&gt;customer1.yourappname-test.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To make this work in your Capybara tests, you can define a helper function that
will temporarily override &lt;code&gt;Capybara.app_host&lt;/code&gt; to point all requests at this
domain.&lt;/p&gt;

&lt;p&gt;For example in &lt;code&gt;lib/testing_support/subdomain_helpers.rb&lt;/code&gt; I have:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;TestingSupport&lt;/span&gt;
  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;SubdomainHelpers&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;within_account_subdomain&lt;/span&gt;
      &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;current_driver&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="ss"&gt;:rack_test&lt;/span&gt;
          &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;app_host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="s2"&gt;"http://&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subdomain&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.yourappname-test.com"&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
          &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;app_host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"http://&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subdomain&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.example.com"&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="n"&gt;after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;app_host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"http://www.example.com"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;yield&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;SubdomainHelpers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:feature&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now on each test invocation, &lt;code&gt;Capybara.app_host&lt;/code&gt; will be set appropriately
and the correct tenant (which in our case is always the default tenant) will be
targeted.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; While this approach works and has been reliable, the author of
Capybara does not recommend or explicitly support the setting of
&lt;code&gt;Capybara.app_host&lt;/code&gt; more than once. We can alternatively set this value just
once, in our spec helper, and it will work fine with the caveat that we will
truly be locked to using just the one tenant in our test suite.&lt;/p&gt;

&lt;p&gt;The relevant RSpec settings from the spec helper are:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Explicitly set the test server process to a particular port&lt;/span&gt;
&lt;span class="c1"&gt;# so that we can access it directly at will.&lt;/span&gt;
&lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;server_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;

&lt;span class="c1"&gt;# To ensure that browser tests can find the test server process,&lt;/span&gt;
&lt;span class="c1"&gt;# always include the port number in URLs.&lt;/span&gt;
&lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;always_include_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the port set and Capybara ensuring that every request includes the port, we
can be sure that all browser tests will hit
&lt;code&gt;http://customer1.yourappname-test.com:10000&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;Asset Generation and Serving in Tests&lt;/h4&gt;

&lt;p&gt;Chances are, with your stock Rails/RSpec/Capybara setup, when you call
&lt;code&gt;save_and_open_page&lt;/code&gt; in a feature spec you will be presented with a completely
unstyled version of your app, as both the CSS and JS asset creation and serving
will be broken.&lt;/p&gt;

&lt;p&gt;This isn&amp;rsquo;t particularly important when you&amp;rsquo;re testing non-Javascript interaction
with your app but as soon as you get into browser testing then this will be an
issue for two key reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If Javascript from the asset pipeline is not served then it will of course
not be available to test.&lt;/li&gt;
&lt;li&gt;The stock asset settings for the test environment can cause RSpec/Capybara to
hang (requiring &lt;code&gt;kill -9&lt;/code&gt; to halt the process).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Searching online you will find various solutions, such as precompiling all
assets on each test run and serving them using &lt;code&gt;file://&lt;/code&gt; URLs pointing to the
&lt;code&gt;public&lt;/code&gt; directory of your Rails app.&lt;/p&gt;

&lt;p&gt;The simplest approach that I have found, and which works well, is simply to set
&lt;code&gt;config.assets.debug = true&lt;/code&gt; in &lt;code&gt;config/environments/test.rb&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Doing so causes assets to be generated and served just as if you were using the
development server; all assets (JS and CSS) should now be generated and served
correctly.&lt;/p&gt;

&lt;h2&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;This is more than likely a work in progress. While the combination of RSpec,
Capybara, FactoryGirl and Selenium have provided a welcome productivity boost on
the development side, they have also caused a great deal of time to be spent on
getting them all to work together reliably, particularly in a multi-tenant
setting.&lt;/p&gt;

&lt;p&gt;Your mileage may vary but I hope these notes will help you to avoid some of the
less-well-documented pitfalls, and so spend more time on actually shipping
features.&lt;/p&gt;

&lt;p&gt;As previously mentioned, I will be taking an in-depth look at the stock Rails
testing framework and methodologies again in the near future. While I appreciate
the neatness of these various 3rd party libraries that have generally made me
more productive, Rails is always on the move and the more moving parts we have
that must keep up, the more points of failure we have, and so the more time we
spend debugging issues that have nothing to do with shipping features and
providing value to users and customers.&lt;/p&gt;

&lt;p&gt;I think it&amp;rsquo;s valuable to keep going back to the &lt;em&gt;point&lt;/em&gt; of testing, which is (in
my mind) to ship reliable software and to make refactoring safer, so that we can
always be working to reduce the technical debt that we normally incur when
evolving software over time. While tools like RSpec and FactoryGirl seem on the
surface to be neat solutions to real problems, it is perhaps the case that
sticking with the standard Rails testing methods will better serve that goal.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Simpler Handling of AJAX Form Errors in Rails 4</title>
    <link rel="alternate" href="https://stefan.magnuson.co/articles/rails/simpler-handling-of-ajax-form-errors-in-rails-4/"/>
    <id>https://stefan.magnuson.co/articles/rails/simpler-handling-of-ajax-form-errors-in-rails-4/</id>
    <published>2014-08-18T00:00:00+01:00</published>
    <updated>2015-10-10T19:29:16+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;The Problem&lt;/h2&gt;

&lt;p&gt;With unobtrusive Javascript, converting a form in Rails to use AJAX is as easy as setting &lt;code&gt;remote: true&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight haml"&gt;&lt;code&gt;&lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form_for&lt;/span&gt; &lt;span class="no"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;remote: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;text_field&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will cause our form to submit asynchronously, and expect a Javascript response, which will be executed directly to e.g. update the page appropriately.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://signalvnoise.com/posts/3697-server-generated-javascript-responses"&gt;DHH recommends&lt;/a&gt; that we design our apps in this manner, where in the Javascript response we re-render the model using its template and use jQuery to update the HTML on the page.&lt;/p&gt;

&lt;p&gt;This method has the advantage of using the same template for both initial page generation and updates, which if used carefully can result in an easy and unobtrusive way to make your app allow for asynchronous interaction.&lt;/p&gt;

&lt;p&gt;One downside however is that every page containing a form for this action which uses &lt;code&gt;remote: true&lt;/code&gt; must be happy to accept the same Javascript response, i.e. that Javascript needs to make sense in all contexts. We could start to put conditional logic in the Javascript response to handle other cases but this would get unwieldy quickly&amp;ndash;overall it would seem best to only use this approach when the model in question is to always be represented in the same manner, with the same kind of interaction, wherever it appears.&lt;/p&gt;

&lt;p&gt;Rails was initially extracted from Basecamp and &lt;a href="http://david.heinemeierhansson.com/2012/the-parley-letter.html"&gt;DHH generally evaluates new Rails development from the perspective of what it will mean for Basecamp&lt;/a&gt;. This pattern of Server-generated Javascript Responses being used to enable remote forms is a pattern that fits Basecamp well. If your app is very similar to Basecamp then not only will this pattern likely serve you well, the rest of Rails will too.&lt;/p&gt;

&lt;p&gt;In my case, I am currently working on a system that doesn&amp;rsquo;t fit so neatly into the Basecamp mould. In today&amp;rsquo;s example I have a case where on one page I want to show the full form for the creation of a Client object (with around 10 fields), and on another page a minimal form with only 4 fields. Both forms should point to the same &lt;code&gt;create&lt;/code&gt; action, which is to be the sole point of Client creation whether we are POSTing data synchronously, using AJAX or communicating via the API.&lt;/p&gt;

&lt;p&gt;As such, rather than return Javascript (which is the default), I want the &lt;code&gt;create&lt;/code&gt; action to return JSON.&lt;/p&gt;

&lt;p&gt;As &lt;a href="https://signalvnoise.com/posts/3697-server-generated-javascript-responses"&gt;DHH notes&lt;/a&gt;, there is a duplication of effort when working with JSON in that you write your template once on the server side and then again on the client side. In this case, this decoupling is desirable to allow for greater flexibility of presentation on the client side.&lt;/p&gt;

&lt;p&gt;This is straightforward to achieve, &lt;strong&gt;with the exception of handling form errors&lt;/strong&gt;, which is the topic of this post.&lt;/p&gt;

&lt;p&gt;By default, when a JSON &lt;code&gt;create&lt;/code&gt; request fails to create the entity in question, errors are returned in the form of field/message pairs, e.g.:&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"can't be blank"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nt"&gt;"year_end"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"can't be blank"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nt"&gt;"date_of_incorporation"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"can't be blank"&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What I want is for those error messages to be applied to the appropriate form fields automatically, highlighting them in red and with the error message in the right place.&lt;/p&gt;

&lt;p&gt;I would be happy to discover that this is already catered for in Rails but it appears to be something that developers are generally rolling on their own.&lt;/p&gt;

&lt;p&gt;In this post I&amp;rsquo;ll present a relatively general way to handle the mapping of JSON errors to input fields for any form in your Rails application that is tied to a model.&lt;/p&gt;

&lt;h3&gt;A Little Background&lt;/h3&gt;

&lt;p&gt;Regarding the adding of &lt;code&gt;remote: true&lt;/code&gt; to a form, all that this does is to add &lt;code&gt;data-remote=&amp;quot;true&amp;quot;&lt;/code&gt; to the form HTML:&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;accept-charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/clients"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"new_client"&lt;/span&gt; &lt;span class="na"&gt;data-remote=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"new_client"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This in itself doesn&amp;rsquo;t cause a form to submit asynchronously, but this data attribute will cause Rails&amp;rsquo; unobtrusive Javascript to bind to the submit function on page load, and use jQuery to submit the form data using an AJAX request.&lt;/p&gt;

&lt;p&gt;The unobtrusive part comes naturally from the fact that if Javascript is not available on the client for whatever reason, the form will submit synchronously and your app will return an HTML response instead of Javascript or JSON.&lt;/p&gt;

&lt;h2&gt;Implementation&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Note: In this example I am using Bootstrap but the technique will work no matter what framework you use (if any), you will just need to change the CSS classes in the code samples.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this example we are creating a Client and the form has four fields. I&amp;rsquo;m using an alternative form helper &lt;a href="https://github.com/bootstrap-ruby/rails-bootstrap-forms"&gt;rails-bootstrap-forms&lt;/a&gt;. All this does is apply bootstrap CSS classes so everything in this post will work fine with the regular form helper (or others) if you tweak the CSS classes accordingly.&lt;/p&gt;

&lt;h3&gt;The Form&lt;/h3&gt;
&lt;pre class="highlight haml"&gt;&lt;code&gt;&lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bootstrap_form_for&lt;/span&gt; &lt;span class="no"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;remote: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;text_field&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;
  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;text_field&lt;/span&gt; &lt;span class="ss"&gt;:company_registration_no&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;label: &lt;/span&gt;&lt;span class="s2"&gt;"Company Registration No."&lt;/span&gt;
  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;date_select&lt;/span&gt; &lt;span class="ss"&gt;:date_of_incorporation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;start_year: &lt;/span&gt;&lt;span class="mi"&gt;1980&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;end_year: &lt;/span&gt;&lt;span class="no"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;today&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;include_blank: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;default: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;label: &lt;/span&gt;&lt;span class="s2"&gt;"Date of Incorporation"&lt;/span&gt;
  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;date_select&lt;/span&gt; &lt;span class="ss"&gt;:year_end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;order: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="ss"&gt;:day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:month&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;include_blank: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;default: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;

  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;submit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;The Controller&lt;/h3&gt;

&lt;p&gt;The form is set to POST (asynchronously or otherwise) to the ClientsController which is a standard scaffold/REST controller. The &lt;code&gt;create&lt;/code&gt; action is largely unchanged from when it was generated:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# POST /clients&lt;/span&gt;
&lt;span class="c1"&gt;# POST /clients.json&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
  &lt;span class="vi"&gt;@client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;respond_to&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
      &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;clients_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;notice: &lt;/span&gt;&lt;span class="s1"&gt;'Client was successfully created.'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;json&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;action: &lt;/span&gt;&lt;span class="s1"&gt;'new'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;json&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;json: &lt;/span&gt;&lt;span class="vi"&gt;@client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;status: :unprocessable_entity&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the client can be saved successfully it returns the new client&amp;rsquo;s details as JSON, rendered by &lt;code&gt;app/views/clients/create.json.jbuilder&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt; &lt;span class="vi"&gt;@client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;
&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="vi"&gt;@client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the client fails validation and cannot be saved, the errors are returned as JSON, e.g.&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"can't be blank"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nt"&gt;"year_end"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"can't be blank"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nt"&gt;"date_of_incorporation"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"can't be blank"&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Validation&lt;/h3&gt;

&lt;p&gt;We have the form which is ready to be submitted asynchronously, and the controller is ready to return JSON, but the default behaviour in Rails AJAX requests is to ask for a JS (Javascript) response. So, we reconfigure all AJAX requests to request JSON instead, as in this application this is what we always want by default:&lt;/p&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Default to JSON responses for remote calls
&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ajaxSetup&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;dataType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'json'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we hook into the AJAX request cycle and specify behaviour for when the Client is created successfully (append it to a list on the page) and for when validation fails (render the errors in the form):&lt;/p&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;# New Client
&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"#new_client"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ajax:success"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"#clients"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;li&amp;gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;/li&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"#clients"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;effect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"highlight"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ajax:error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"#step-clients form"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;render_form_errors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'client'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;responseJSON&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The crucial part here, which appears to not be provided by Rails, is this &lt;code&gt;render_form_errors&lt;/code&gt; function. Here is my naïve implementation which looks for form elements with a &lt;code&gt;name&lt;/code&gt; that &lt;em&gt;starts with&lt;/em&gt; the field name provided in the errors hash:&lt;/p&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;render_form_errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;model_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;clear_form_errors&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'input, select, textarea'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
        &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;model_name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;['&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;field&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;(?'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;closest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.form-group'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;addClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'has-error'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;span class="help-block"&amp;gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="na"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;br /&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;'&amp;lt;/span&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Scoping the search to the form in question, we look for &lt;strong&gt;any element&lt;/strong&gt; with a &lt;code&gt;name&lt;/code&gt; that starts with the given field name. For example for the &amp;ldquo;year end&amp;rdquo; field, its HTML representation is:&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"client_year_end_1i"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"client[year_end(1i)]"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can&amp;rsquo;t match it exactly as it is suffixed with &lt;code&gt;(1i)&lt;/code&gt; due to it being composed of multiple select drop downs. Instead, this function will look for any form elements with a name that matches the regex &lt;code&gt;/client\[year_end\(?/&lt;/code&gt; which matches strings like &lt;code&gt;&amp;quot;client[year_end]&amp;quot;&lt;/code&gt; or in this case &lt;code&gt;&amp;quot;client[year_end(1i)]&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Importantly, it &lt;strong&gt;does not&lt;/strong&gt; match strings like &lt;code&gt;&amp;quot;client[year_end_another_field_name]&amp;quot;&lt;/code&gt; as this would cause errors for certain fields to find their way on to the elements of other fields where the names share a common beginning.&lt;/p&gt;

&lt;h3&gt;Resetting Forms&lt;/h3&gt;

&lt;p&gt;We define two more helper functions that will be used when working with remote forms, one to clear all errors from the form and the other to clear all form data (which we might do when we successfully save a Client):&lt;/p&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;clear_form_errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.form-group'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;removeClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'has-error'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'span.help-block'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;clear_form_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;':input'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'#myform'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;not&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;':button, :submit, :reset, :hidden'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;removeAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'checked'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;removeAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'selected'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;With the above we now have a fairly general implementation of remote forms for our app where to fully handle validation we only need to call one helper method.&lt;/p&gt;

&lt;p&gt;In doing so we have left the controller largely untouched, and thanks to a custom form helper and Bootstrap we need need do very little to have all controls appear as they should when we need to show an error.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what the result looks like when we click submit on an empty form, thus triggering validation errors:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://stefan.haflidason.com/assets/2014/08/Screen-Shot-2014-08-18-at-16.42.21.png" alt="Bootrap Rails Form Validation" width="491" height="444" class="aligncenter size-full wp-image-784" /&gt;&lt;/p&gt;

&lt;p&gt;If you have any questions or suggestions for improvement you can &lt;a href="https://twitter.com/styrmis"&gt;drop me a line on Twitter&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
</feed>
