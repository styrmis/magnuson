<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/articles</id>
  <link href="http://blog.url.com/articles"/>
  <link href="http://blog.url.com/articles/feed.xml" rel="self"/>
  <updated>2014-08-20T00:00:00+01:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Robust Integration Testing in Rails 4 with RSpec, Capybara and Selenium</title>
    <link rel="alternate" href="http://blog.url.com/articles/rails/robust-integration-testing-in-rails-4-with-rspec-capybara-and-selenium/"/>
    <id>http://blog.url.com/articles/rails/robust-integration-testing-in-rails-4-with-rspec-capybara-and-selenium/</id>
    <published>2014-08-20T00:00:00+01:00</published>
    <updated>2015-10-10T21:28:38+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;The Problem&lt;/h2&gt;

&lt;p&gt;Using RSpec and Capybara to test your Rails apps can make writing tests easier
which is good both from a perspective of getting people to actually write tests
but also for our general productivity as developers.&lt;/p&gt;

&lt;p&gt;While it has its detractors, I like the terse syntax and ease with which we can
define our own helpers which help set up certain contexts such as in this case
setting up the default account and switching into its subdomain:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;feature&lt;/span&gt; &lt;span class="s2"&gt;"Onboarding"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:js&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;with_default_account&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;within_account_subdomain&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="no"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create_default_services&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="n"&gt;scenario&lt;/span&gt; &lt;span class="s2"&gt;"User can complete onboarding process"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;visit&lt;/span&gt; &lt;span class="n"&gt;dashboard_path&lt;/span&gt;

        &lt;span class="c1"&gt;# User is redirected&lt;/span&gt;
        &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;current_path&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getting_started_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;fill_in&lt;/span&gt; &lt;span class="s2"&gt;"Name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;with: &lt;/span&gt;&lt;span class="s2"&gt;"New Service XYZ"&lt;/span&gt;
        &lt;span class="n"&gt;click_button&lt;/span&gt; &lt;span class="s2"&gt;"Create Service"&lt;/span&gt;

        &lt;span class="c1"&gt;# ...&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Those helpers can be used in any test, which eliminates repeated setup code
between test cases. Then from Capybara we get a simple but powerful DSL which
lets us &lt;code&gt;visit&lt;/code&gt; pages, &lt;code&gt;fill_in&lt;/code&gt; forms and interact as if we were a user
(&lt;code&gt;click_button&lt;/code&gt;, &lt;code&gt;click_link&lt;/code&gt;). This is an attractive mix and it isn&amp;rsquo;t hard to
see why this has caught on.&lt;/p&gt;

&lt;p&gt;The testing setup that ships with Rails is also perfectly capable but generally
I prefer this syntax and workflow. One great advantage that the standard testing
setup (using &lt;code&gt;Test::Unit&lt;/code&gt;) has over RSpec however is &lt;strong&gt;support&lt;/strong&gt;&amp;ndash;quite simply
when you write your tests using &lt;code&gt;Test::Unit&lt;/code&gt; and the default Rails helpers you
will be in good company and can expect minimum fuss. As the Rails core team
advance the test harness then you can also benefit from out-of-the-box
improvements like Spring, which will cut app startup time out of the test
running equation.&lt;/p&gt;

&lt;p&gt;When you move to RSpec however, and start mixing in things like Capybara,
FactoryGirl (for fixtures) and Selenium then you are entering potentially
uncharted territory, in particular because your app may have something unusual
about it that causes your tests to fail, perhaps mysteriously.&lt;/p&gt;

&lt;p&gt;One way to look at the argument between the two approaches is that if you work
with Rails on a contract/consulting basis then having familiarity with both is
going to be advantageous&amp;ndash;if you work only on your own projects then the choice
is entirely up to you.&lt;/p&gt;

&lt;p&gt;In this post I&amp;rsquo;m going to step through the several roadblocks that I have
encountered in setting up the above tools such that they all work together
correctly and reliably. In doing so I will attempt to keep the setup as simple
as possible, and minimise the use of blunt instruments like &lt;code&gt;database_cleaner&lt;/code&gt;&amp;rsquo;s
truncation strategy.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Given how many moving parts there are here (the majority from 3rd
parties), for future projects I will be experimenting with sticking to the stock
Rails test framework to measure approximately the difference in productivity.
The tests may (or may not!) take longer to write, but I would expect some gains
from the reduction in lost time due to needing to fix the test harness.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;An additional complication that I have is that I am testing a subdomain-based
multi-tenant system&amp;ndash;this is something that is not well documented when it comes
to RSpec and particularly Capybara so if you are in a similar situation then the
following should hopefully be of use to you.&lt;/p&gt;

&lt;p&gt;The roadblocks I have hit are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Database inconsistencies when running a mix of plain and Javascript/Selenium
tests.&lt;/li&gt;
&lt;li&gt;Assets (CSS/JS) not being served in Selenium tests.&lt;/li&gt;
&lt;li&gt;The requesting of assets causing RSpec/Capybara to hang, with no hint as to
what is wrong.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The setup:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rspec-rails 2.14.2&lt;/li&gt;
&lt;li&gt;capybara 2.4.1&lt;/li&gt;
&lt;li&gt;selenium-webdriver 2.42.0&lt;/li&gt;
&lt;li&gt;factory&lt;em&gt;girl&lt;/em&gt;rails 4.4.1&lt;/li&gt;
&lt;li&gt;database_cleaner 1.3.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The characteristics that we want the setup to have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Running a test in a real browser should be as simple as specifying &lt;code&gt;:js&lt;/code&gt; for
a feature or scenario.&lt;/li&gt;
&lt;li&gt;Tests should pass/fail reliably, not sporadically, i.e. there should be no
race conditions.&lt;/li&gt;
&lt;li&gt;All tests will be carried out using a single tenant&amp;ndash;we are testing the
application functionality; the multi-tenant aspect of the system will be
handled by a completely separate set of tests as mixing the two in one suite is
more trouble than it&amp;rsquo;s worth.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;The Solution&lt;/h2&gt;

&lt;h3&gt;Gemfile&lt;/h3&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="ss"&gt;:development&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:test&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'rspec-rails'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'2.14.2'&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'capybara'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'2.4.1'&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'selenium-webdriver'&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'factory_girl_rails'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'~&amp;gt; 4.0'&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'database_cleaner'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'1.3.0'&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Spec Helper&lt;/h3&gt;

&lt;p&gt;Here is a full spec helper file (which should live in &lt;code&gt;spec/spec_helper.rb&lt;/code&gt;); I
would recommend reading the comments and incorporating the settings as
appropriate (i.e. don&amp;rsquo;t copy and paste this whole file into your project):&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# This file is copied to spec/ when you run 'rails generate rspec:install'&lt;/span&gt;
&lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"RAILS_ENV"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="s1"&gt;'test'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expand_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"../../config/environment"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;__FILE__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rspec/rails'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rspec/autorun'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'capybara'&lt;/span&gt;

&lt;span class="c1"&gt;# Requires supporting ruby files with custom matchers and macros, etc,&lt;/span&gt;
&lt;span class="c1"&gt;# in spec/support/ and its subdirectories.&lt;/span&gt;
&lt;span class="no"&gt;Dir&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"spec/support/**/*.rb"&lt;/span&gt;&lt;span class="p"&gt;)].&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Checks for pending migrations before tests are run.&lt;/span&gt;
&lt;span class="c1"&gt;# If you are not using ActiveRecord, you can remove this line.&lt;/span&gt;
&lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;check_pending!&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;defined?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="c1"&gt;# Remove this when upgrading to RSpec 3&lt;/span&gt;
  &lt;span class="c1"&gt;# Allows us to write just `:js` instead of `js: true` in tests&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;treat_symbols_as_metadata_keys_with_true_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;

  &lt;span class="c1"&gt;# Remove this line if you're not using ActiveRecord or ActiveRecord&lt;/span&gt;
&lt;span class="n"&gt;fixtures&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fixture_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;root&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/spec/fixtures"&lt;/span&gt;

  &lt;span class="c1"&gt;# If you're not using ActiveRecord, or you'd prefer not to run each of&lt;/span&gt;
&lt;span class="n"&gt;your&lt;/span&gt;
  &lt;span class="c1"&gt;# database_cleaner below&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;use_transactional_fixtures&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;

  &lt;span class="c1"&gt;# If true, the base class of anonymous controllers will be inferred&lt;/span&gt;
  &lt;span class="c1"&gt;# automatically. This will be the default behavior in future versions of&lt;/span&gt;
  &lt;span class="c1"&gt;# rspec-rails.&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;infer_base_class_for_anonymous_controllers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;

  &lt;span class="c1"&gt;# Run specs in random order to surface order dependencies. If you find an&lt;/span&gt;
  &lt;span class="c1"&gt;# order dependency and want to debug it, you can fix the order by&lt;/span&gt;
&lt;span class="n"&gt;providing&lt;/span&gt;
  &lt;span class="c1"&gt;# the seed, which is printed after each run.&lt;/span&gt;
  &lt;span class="c1"&gt;#     --seed 1234&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"random"&lt;/span&gt;

  &lt;span class="c1"&gt;# Insist on 'expect' syntax rather than 'should'&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expect_with&lt;/span&gt; &lt;span class="ss"&gt;:rspec&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;syntax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:expect&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:suite&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;# First, in case the database contains data from a previous run (e.g.&lt;/span&gt;
    &lt;span class="c1"&gt;# from a run that crashed), run a full clean using the truncation&lt;/span&gt;
    &lt;span class="c1"&gt;# strategy.&lt;/span&gt;
    &lt;span class="no"&gt;DatabaseCleaner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;clean_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:truncation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# *** The following is specific to this project&lt;/span&gt;
    &lt;span class="c1"&gt;#     Here we set up the default tenant to be used in each test&lt;/span&gt;

    &lt;span class="c1"&gt;# Drop the default tenant if it exists&lt;/span&gt;
    &lt;span class="no"&gt;Apartment&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PracticeManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;DEFAULT_TENANT_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;rescue&lt;/span&gt;
&lt;span class="kp"&gt;nil&lt;/span&gt;

    &lt;span class="c1"&gt;# Create the default tenant&lt;/span&gt;
    &lt;span class="n"&gt;default_account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Subscriptions&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="ss"&gt;:"Test Customer
#1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;subdomain: &lt;/span&gt;&lt;span class="no"&gt;PracticeManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;DEFAULT_TENANT_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;default_account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create_schema&lt;/span&gt;

    &lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Subscriptions&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;email: &lt;/span&gt;&lt;span class="s2"&gt;"customer@example.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="ss"&gt;password: &lt;/span&gt;&lt;span class="s2"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;password_confirmation: &lt;/span&gt;&lt;span class="s2"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;default_account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;
    &lt;span class="n"&gt;default_account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save!&lt;/span&gt;

    &lt;span class="n"&gt;default_account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;users&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;default_account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;owner&lt;/span&gt;

    &lt;span class="c1"&gt;# *** End of project-specific portion&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:each&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;# If the test is a Javascript test, set the strategy to truncation&lt;/span&gt;
    &lt;span class="c1"&gt;# as transactional cleaning will not work due to the test runner&lt;/span&gt;
    &lt;span class="c1"&gt;# and app not sharing the same process when testing from a browser.&lt;/span&gt;
    &lt;span class="c1"&gt;# For non-Javascript tests use the transaction strategy as it is faster.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:js&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="no"&gt;DatabaseCleaner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;strategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:truncation&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="no"&gt;DatabaseCleaner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;strategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:transaction&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="no"&gt;DatabaseCleaner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;

    &lt;span class="c1"&gt;# Before each test, switch into the schema of the default tenant&lt;/span&gt;
    &lt;span class="no"&gt;Apartment&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PracticeManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;DEFAULT_TENANT_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;after&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:each&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="no"&gt;DatabaseCleaner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;clean&lt;/span&gt;
    &lt;span class="no"&gt;Apartment&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reset&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# Load FactoryGirl helpers&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include&lt;/span&gt; &lt;span class="no"&gt;FactoryGirl&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Syntax&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Methods&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Explicitly set the test server process to a particular port&lt;/span&gt;
&lt;span class="c1"&gt;# so that we can access it directly at will.&lt;/span&gt;
&lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;server_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;

&lt;span class="c1"&gt;# To ensure that browser tests can find the test server process,&lt;/span&gt;
&lt;span class="c1"&gt;# always include the port number in URLs.&lt;/span&gt;
&lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;always_include_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;

&lt;span class="c1"&gt;# For all tests except Javascript tests we will use :rack_test&lt;/span&gt;
&lt;span class="c1"&gt;# (the default) as it is the fastest. For Javascript tests we will&lt;/span&gt;
&lt;span class="c1"&gt;# use Selenium as it is the most robust/mature browser driver&lt;/span&gt;
&lt;span class="c1"&gt;# available.&lt;/span&gt;
&lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;javascript_driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:selenium&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Database Cleaner&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;database_cleaner&lt;/code&gt; gem feels intuitively like an unpleasant hack, but with
the right configuration it can work in such a way that we only change the test
runner behaviour slightly for JS tests.&lt;/p&gt;

&lt;p&gt;It is well known that once you are using Factory Girl and/or browser testing
then you will want to stop using transactional fixtures as they won&amp;rsquo;t work as
expected:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;use_transactional_fixtures&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, when cleaning up after tests it is common to use the cleaner&amp;rsquo;s
&lt;code&gt;truncation&lt;/code&gt; strategy after browsers tests and the &lt;code&gt;transaction&lt;/code&gt; strategy
(basically the same as that enabled by &lt;code&gt;config.use_transactional_fixtures&lt;/code&gt;) for
all other tests.&lt;/p&gt;

&lt;p&gt;Many tutorials and StackOverflow answers out there have JS and non-JS tests
mixed together, with the strategy being switched between &lt;code&gt;transaction&lt;/code&gt; and
&lt;code&gt;truncation&lt;/code&gt; on each test.&lt;/p&gt;

&lt;p&gt;In my experience this has resulted in database access race conditions that have
caused otherwise well-written, independent tests to fail intermittently.&lt;/p&gt;

&lt;p&gt;The solution I have settled on is to run all non-JS tests first (shuffled), and
then all JS tests (also shuffled). This allows for discovery of tests that
incorrectly expect certain state, or fail to clean up after themselves (by
virtue of the random execution order), while not attempting to freely mix JS and
non-JS tests. As these different classes of test have different purposes, I see
no disadvantage in this approach, with the exception of it being somewhat
non-standard.&lt;/p&gt;

&lt;p&gt;In RSpec 3 we would be able to provide our own ordering scheme to achieve this,
but as we are still on RSpec 2 this needs to be set up outside of the spec
helper.&lt;/p&gt;

&lt;p&gt;First, in &lt;code&gt;.rspec&lt;/code&gt; we set the default runner to exclude all Javascript tests:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;--color --tag ~js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;(We also colour all output)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now when we run &lt;code&gt;rspec&lt;/code&gt; in the shell it will run all tests not marked with
&lt;code&gt;:js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To run our browser tests, we now need to run &lt;code&gt;rspec --tag js&lt;/code&gt;. While this could
perhaps be seen as inconvenient, I find this preferable as generally I am not
looking to run the (very slow) browser tests unless I am working on a
Javascript-based feature, or I am committing code.&lt;/p&gt;

&lt;p&gt;I have a git pre-commit hook which handles the running of both suites of tests,
and only allows the commit to go ahead if both suites pass.&lt;/p&gt;

&lt;p&gt;In a file symlinked to &lt;code&gt;.git/hooks/pre-commit&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="c"&gt;# Based on&lt;/span&gt;
http://codeinthehole.com/writing/tips-for-using-a-git-pre-commit-hook/

clean_up_and_exit &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  git stash pop -q
  &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# Run all tests and ensure that they pass before continuing&lt;/span&gt;
git stash -q --keep-index

rspec --tag ~js
&lt;span class="nv"&gt;RESULT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$RESULT&lt;/span&gt; -ne 0 &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; clean_up_and_exit 1

rspec --tag js
&lt;span class="nv"&gt;JS_RESULT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$JS_RESULT&lt;/span&gt; -ne 0 &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; clean_up_and_exit 1

&lt;span class="c"&gt;# All tests passed&lt;/span&gt;
clean_up_and_exit 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So in general I&amp;rsquo;ll be running individual test files as I work, and then before
committing I will be sure to exercise the whole test suite.&lt;/p&gt;

&lt;h4&gt;Why Selenium?&lt;/h4&gt;

&lt;p&gt;Initially I was using the
&lt;a href="https://github.com/thoughtbot/capybara-webkit"&gt;capybara-webkit&lt;/a&gt; gem to allow
for headless testing but unfortunately ran into some sporadic errors/hangs which
were hard to nail down.&lt;/p&gt;

&lt;p&gt;Running the tests without a live browsers instance is both faster, easier to
integrate with a CI server and has the advantage of not popping up windows on
your machine when testing. That said, as my primary goal here is to set up the
most reliable test harness I have gone for Selenium as the driver as it is a
more mature offering by virtue of it having been in production use for longer.&lt;/p&gt;

&lt;h4&gt;FactoryGirl&lt;/h4&gt;

&lt;p&gt;FactoryGirl makes generating test data trivially easy, but it also makes tests
unpredictable if the cleanup of this data is not handled appropriately.&lt;/p&gt;

&lt;p&gt;By completely separating our JS and non-JS test suites, and using the
&lt;code&gt;truncation&lt;/code&gt; strategy for DatabaseCleaner on JS tests we get the best of both
worlds: JS tests are run cleanly with no database-related race conditions, and
all other tests run as quickly as possible using the &lt;code&gt;transaction&lt;/code&gt; strategy.&lt;/p&gt;

&lt;h4&gt;Multi-tenant / Subdomain Testing&lt;/h4&gt;

&lt;p&gt;The multi-tenant aspect of the system is provided by a Rails engine,
custom-built for the purpose of managing accounts, users, authentication and
scoping of data based on the current subdomain. The engine has its own test
suite which exercises this logic and tests the data scoping in particular. The
test suite runs on &lt;code&gt;rack_test&lt;/code&gt; only.&lt;/p&gt;

&lt;p&gt;When testing, FactoryGirl is used to create multiple accounts, each with their
own subdomain and database (or schema, in the case of Postgres).&lt;/p&gt;

&lt;p&gt;Initially when testing the behaviour of the host application I continued with
this approach. Now however, to greatly simplify the testing process, all tests
&lt;strong&gt;for the host app&lt;/strong&gt; (and not the engine) run against a single default tenant.&lt;/p&gt;

&lt;p&gt;One of the key reasons for doing this is to avoid needing to resolve potentially
hundreds of subdomains to &lt;code&gt;localhost&lt;/code&gt; when running browser tests. In &lt;code&gt;rack_test&lt;/code&gt;
it doesn&amp;rsquo;t matter that &lt;code&gt;customer20.example.com&lt;/code&gt; doesn&amp;rsquo;t resolve as it doesn&amp;rsquo;t
resolve names by DNS in the first place.&lt;/p&gt;

&lt;p&gt;When using Selenium however the address must resolve. Setting up a local DNS
server like &lt;code&gt;dnsmasq&lt;/code&gt; is one option, but now your development and test
environments need to have this external software installed and running. An
alternative could be to use &lt;a href="http://pow.cx"&gt;Pow&lt;/a&gt;, which I am already using for
development, to automatically resolve all subdomains at an appropriate &lt;code&gt;.dev&lt;/code&gt;
domain.&lt;/p&gt;

&lt;p&gt;While both approaches work, both would behave erratically on occasion. The
solution in the case of Pow was to upgrade to the latest version, but this
highlighted the fragility of the approach. With &lt;code&gt;dnsmasq&lt;/code&gt; again you have a
fragile solution that could break the next time you update your OS, making it
undesirable too.&lt;/p&gt;

&lt;p&gt;By sticking to the one tenant in all tests, all that needs to be done to have
browser tests work is to map the one tenant domain to &lt;code&gt;localhost&lt;/code&gt; in
&lt;code&gt;/etc/hosts&lt;/code&gt;, e.g. &lt;code&gt;customer1.yourappname-test.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To make this work in your Capybara tests, you can define a helper function that
will temporarily override &lt;code&gt;Capybara.app_host&lt;/code&gt; to point all requests at this
domain.&lt;/p&gt;

&lt;p&gt;For example in &lt;code&gt;lib/testing_support/subdomain_helpers.rb&lt;/code&gt; I have:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;TestingSupport&lt;/span&gt;
  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;SubdomainHelpers&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;within_account_subdomain&lt;/span&gt;
      &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;current_driver&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="ss"&gt;:rack_test&lt;/span&gt;
          &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;app_host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="s2"&gt;"http://&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subdomain&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.yourappname-test.com"&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
          &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;app_host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"http://&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subdomain&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.example.com"&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="n"&gt;after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;app_host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"http://www.example.com"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;yield&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;SubdomainHelpers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:type&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:feature&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now on each test invocation, &lt;code&gt;Capybara.app_host&lt;/code&gt; will be set appropriately
and the correct tenant (which in our case is always the default tenant) will be
targeted.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; While this approach works and has been reliable, the author of
Capybara does not recommend or explicitly support the setting of
&lt;code&gt;Capybara.app_host&lt;/code&gt; more than once. We can alternatively set this value just
once, in our spec helper, and it will work fine with the caveat that we will
truly be locked to using just the one tenant in our test suite.&lt;/p&gt;

&lt;p&gt;The relevant RSpec settings from the spec helper are:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Explicitly set the test server process to a particular port&lt;/span&gt;
&lt;span class="c1"&gt;# so that we can access it directly at will.&lt;/span&gt;
&lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;server_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;

&lt;span class="c1"&gt;# To ensure that browser tests can find the test server process,&lt;/span&gt;
&lt;span class="c1"&gt;# always include the port number in URLs.&lt;/span&gt;
&lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;always_include_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the port set and Capybara ensuring that every request includes the port, we
can be sure that all browser tests will hit
&lt;code&gt;http://customer1.yourappname-test.com:10000&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;Asset Generation and Serving in Tests&lt;/h4&gt;

&lt;p&gt;Chances are, with your stock Rails/RSpec/Capybara setup, when you call
&lt;code&gt;save_and_open_page&lt;/code&gt; in a feature spec you will be presented with a completely
unstyled version of your app, as both the CSS and JS asset creation and serving
will be broken.&lt;/p&gt;

&lt;p&gt;This isn&amp;rsquo;t particularly important when you&amp;rsquo;re testing non-Javascript interaction
with your app but as soon as you get into browser testing then this will be an
issue for two key reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If Javascript from the asset pipeline is not served then it will of course
not be available to test.&lt;/li&gt;
&lt;li&gt;The stock asset settings for the test environment can cause RSpec/Capybara to
hang (requiring &lt;code&gt;kill -9&lt;/code&gt; to halt the process).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Searching online you will find various solutions, such as precompiling all
assets on each test run and serving them using &lt;code&gt;file://&lt;/code&gt; URLs pointing to the
&lt;code&gt;public&lt;/code&gt; directory of your Rails app.&lt;/p&gt;

&lt;p&gt;The simplest approach that I have found, and which works well, is simply to set
&lt;code&gt;config.assets.debug = true&lt;/code&gt; in &lt;code&gt;config/environments/test.rb&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Doing so causes assets to be generated and served just as if you were using the
development server; all assets (JS and CSS) should now be generated and served
correctly.&lt;/p&gt;

&lt;h2&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;This is more than likely a work in progress. While the combination of RSpec,
Capybara, FactoryGirl and Selenium have provided a welcome productivity boost on
the development side, they have also caused a great deal of time to be spent on
getting them all to work together reliably, particularly in a multi-tenant
setting.&lt;/p&gt;

&lt;p&gt;Your mileage may vary but I hope these notes will help you to avoid some of the
less-well-documented pitfalls, and so spend more time on actually shipping
features.&lt;/p&gt;

&lt;p&gt;As previously mentioned, I will be taking an in-depth look at the stock Rails
testing framework and methodologies again in the near future. While I appreciate
the neatness of these various 3rd party libraries that have generally made me
more productive, Rails is always on the move and the more moving parts we have
that must keep up, the more points of failure we have, and so the more time we
spend debugging issues that have nothing to do with shipping features and
providing value to users and customers.&lt;/p&gt;

&lt;p&gt;I think it&amp;rsquo;s valuable to keep going back to the &lt;em&gt;point&lt;/em&gt; of testing, which is (in
my mind) to ship reliable software and to make refactoring safer, so that we can
always be working to reduce the technical debt that we normally incur when
evolving software over time. While tools like RSpec and FactoryGirl seem on the
surface to be neat solutions to real problems, it is perhaps the case that
sticking with the standard Rails testing methods will better serve that goal.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Simpler Handling of AJAX Form Errors in Rails 4</title>
    <link rel="alternate" href="http://blog.url.com/articles/rails/simpler-handling-of-ajax-form-errors-in-rails-4/"/>
    <id>http://blog.url.com/articles/rails/simpler-handling-of-ajax-form-errors-in-rails-4/</id>
    <published>2014-08-18T00:00:00+01:00</published>
    <updated>2015-10-10T19:29:16+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;The Problem&lt;/h2&gt;

&lt;p&gt;With unobtrusive Javascript, converting a form in Rails to use AJAX is as easy as setting &lt;code&gt;remote: true&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight haml"&gt;&lt;code&gt;&lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form_for&lt;/span&gt; &lt;span class="no"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;remote: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;text_field&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will cause our form to submit asynchronously, and expect a Javascript response, which will be executed directly to e.g. update the page appropriately.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://signalvnoise.com/posts/3697-server-generated-javascript-responses"&gt;DHH recommends&lt;/a&gt; that we design our apps in this manner, where in the Javascript response we re-render the model using its template and use jQuery to update the HTML on the page.&lt;/p&gt;

&lt;p&gt;This method has the advantage of using the same template for both initial page generation and updates, which if used carefully can result in an easy and unobtrusive way to make your app allow for asynchronous interaction.&lt;/p&gt;

&lt;p&gt;One downside however is that every page containing a form for this action which uses &lt;code&gt;remote: true&lt;/code&gt; must be happy to accept the same Javascript response, i.e. that Javascript needs to make sense in all contexts. We could start to put conditional logic in the Javascript response to handle other cases but this would get unwieldy quickly&amp;ndash;overall it would seem best to only use this approach when the model in question is to always be represented in the same manner, with the same kind of interaction, wherever it appears.&lt;/p&gt;

&lt;p&gt;Rails was initially extracted from Basecamp and &lt;a href="http://david.heinemeierhansson.com/2012/the-parley-letter.html"&gt;DHH generally evaluates new Rails development from the perspective of what it will mean for Basecamp&lt;/a&gt;. This pattern of Server-generated Javascript Responses being used to enable remote forms is a pattern that fits Basecamp well. If your app is very similar to Basecamp then not only will this pattern likely serve you well, the rest of Rails will too.&lt;/p&gt;

&lt;p&gt;In my case, I am currently working on a system that doesn&amp;rsquo;t fit so neatly into the Basecamp mould. In today&amp;rsquo;s example I have a case where on one page I want to show the full form for the creation of a Client object (with around 10 fields), and on another page a minimal form with only 4 fields. Both forms should point to the same &lt;code&gt;create&lt;/code&gt; action, which is to be the sole point of Client creation whether we are POSTing data synchronously, using AJAX or communicating via the API.&lt;/p&gt;

&lt;p&gt;As such, rather than return Javascript (which is the default), I want the &lt;code&gt;create&lt;/code&gt; action to return JSON.&lt;/p&gt;

&lt;p&gt;As &lt;a href="https://signalvnoise.com/posts/3697-server-generated-javascript-responses"&gt;DHH notes&lt;/a&gt;, there is a duplication of effort when working with JSON in that you write your template once on the server side and then again on the client side. In this case, this decoupling is desirable to allow for greater flexibility of presentation on the client side.&lt;/p&gt;

&lt;p&gt;This is straightforward to achieve, &lt;strong&gt;with the exception of handling form errors&lt;/strong&gt;, which is the topic of this post.&lt;/p&gt;

&lt;p&gt;By default, when a JSON &lt;code&gt;create&lt;/code&gt; request fails to create the entity in question, errors are returned in the form of field/message pairs, e.g.:&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"can't be blank"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nt"&gt;"year_end"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"can't be blank"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nt"&gt;"date_of_incorporation"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"can't be blank"&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What I want is for those error messages to be applied to the appropriate form fields automatically, highlighting them in red and with the error message in the right place.&lt;/p&gt;

&lt;p&gt;I would be happy to discover that this is already catered for in Rails but it appears to be something that developers are generally rolling on their own.&lt;/p&gt;

&lt;p&gt;In this post I&amp;rsquo;ll present a relatively general way to handle the mapping of JSON errors to input fields for any form in your Rails application that is tied to a model.&lt;/p&gt;

&lt;h3&gt;A Little Background&lt;/h3&gt;

&lt;p&gt;Regarding the adding of &lt;code&gt;remote: true&lt;/code&gt; to a form, all that this does is to add &lt;code&gt;data-remote=&amp;quot;true&amp;quot;&lt;/code&gt; to the form HTML:&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;accept-charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/clients"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"new_client"&lt;/span&gt; &lt;span class="na"&gt;data-remote=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"new_client"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This in itself doesn&amp;rsquo;t cause a form to submit asynchronously, but this data attribute will cause Rails&amp;rsquo; unobtrusive Javascript to bind to the submit function on page load, and use jQuery to submit the form data using an AJAX request.&lt;/p&gt;

&lt;p&gt;The unobtrusive part comes naturally from the fact that if Javascript is not available on the client for whatever reason, the form will submit synchronously and your app will return an HTML response instead of Javascript or JSON.&lt;/p&gt;

&lt;h2&gt;Implementation&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Note: In this example I am using Bootstrap but the technique will work no matter what framework you use (if any), you will just need to change the CSS classes in the code samples.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this example we are creating a Client and the form has four fields. I&amp;rsquo;m using an alternative form helper &lt;a href="https://github.com/bootstrap-ruby/rails-bootstrap-forms"&gt;rails-bootstrap-forms&lt;/a&gt;. All this does is apply bootstrap CSS classes so everything in this post will work fine with the regular form helper (or others) if you tweak the CSS classes accordingly.&lt;/p&gt;

&lt;h3&gt;The Form&lt;/h3&gt;
&lt;pre class="highlight haml"&gt;&lt;code&gt;&lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bootstrap_form_for&lt;/span&gt; &lt;span class="no"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;remote: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;text_field&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;
  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;text_field&lt;/span&gt; &lt;span class="ss"&gt;:company_registration_no&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;label: &lt;/span&gt;&lt;span class="s2"&gt;"Company Registration No."&lt;/span&gt;
  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;date_select&lt;/span&gt; &lt;span class="ss"&gt;:date_of_incorporation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;start_year: &lt;/span&gt;&lt;span class="mi"&gt;1980&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;end_year: &lt;/span&gt;&lt;span class="no"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;today&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;include_blank: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;default: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;label: &lt;/span&gt;&lt;span class="s2"&gt;"Date of Incorporation"&lt;/span&gt;
  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;date_select&lt;/span&gt; &lt;span class="ss"&gt;:year_end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;order: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="ss"&gt;:day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:month&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;include_blank: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;default: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;

  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;submit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;The Controller&lt;/h3&gt;

&lt;p&gt;The form is set to POST (asynchronously or otherwise) to the ClientsController which is a standard scaffold/REST controller. The &lt;code&gt;create&lt;/code&gt; action is largely unchanged from when it was generated:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# POST /clients&lt;/span&gt;
&lt;span class="c1"&gt;# POST /clients.json&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
  &lt;span class="vi"&gt;@client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;respond_to&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
      &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;clients_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;notice: &lt;/span&gt;&lt;span class="s1"&gt;'Client was successfully created.'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;json&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;action: &lt;/span&gt;&lt;span class="s1"&gt;'new'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;json&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;json: &lt;/span&gt;&lt;span class="vi"&gt;@client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;status: :unprocessable_entity&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the client can be saved successfully it returns the new client&amp;rsquo;s details as JSON, rendered by &lt;code&gt;app/views/clients/create.json.jbuilder&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt; &lt;span class="vi"&gt;@client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;
&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="vi"&gt;@client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the client fails validation and cannot be saved, the errors are returned as JSON, e.g.&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"can't be blank"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nt"&gt;"year_end"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"can't be blank"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nt"&gt;"date_of_incorporation"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"can't be blank"&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Validation&lt;/h3&gt;

&lt;p&gt;We have the form which is ready to be submitted asynchronously, and the controller is ready to return JSON, but the default behaviour in Rails AJAX requests is to ask for a JS (Javascript) response. So, we reconfigure all AJAX requests to request JSON instead, as in this application this is what we always want by default:&lt;/p&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Default to JSON responses for remote calls
&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ajaxSetup&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;dataType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'json'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we hook into the AJAX request cycle and specify behaviour for when the Client is created successfully (append it to a list on the page) and for when validation fails (render the errors in the form):&lt;/p&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;# New Client
&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"#new_client"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ajax:success"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"#clients"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;li&amp;gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;/li&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"#clients"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;effect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"highlight"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ajax:error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"#step-clients form"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;render_form_errors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'client'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;responseJSON&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The crucial part here, which appears to not be provided by Rails, is this &lt;code&gt;render_form_errors&lt;/code&gt; function. Here is my naïve implementation which looks for form elements with a &lt;code&gt;name&lt;/code&gt; that &lt;em&gt;starts with&lt;/em&gt; the field name provided in the errors hash:&lt;/p&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;render_form_errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;model_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;clear_form_errors&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'input, select, textarea'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
        &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;model_name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;['&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;field&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;(?'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;closest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.form-group'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;addClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'has-error'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;span class="help-block"&amp;gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="na"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;br /&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;'&amp;lt;/span&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Scoping the search to the form in question, we look for &lt;strong&gt;any element&lt;/strong&gt; with a &lt;code&gt;name&lt;/code&gt; that starts with the given field name. For example for the &amp;ldquo;year end&amp;rdquo; field, its HTML representation is:&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"client_year_end_1i"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"client[year_end(1i)]"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can&amp;rsquo;t match it exactly as it is suffixed with &lt;code&gt;(1i)&lt;/code&gt; due to it being composed of multiple select drop downs. Instead, this function will look for any form elements with a name that matches the regex &lt;code&gt;/client\[year_end\(?/&lt;/code&gt; which matches strings like &lt;code&gt;&amp;quot;client[year_end]&amp;quot;&lt;/code&gt; or in this case &lt;code&gt;&amp;quot;client[year_end(1i)]&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Importantly, it &lt;strong&gt;does not&lt;/strong&gt; match strings like &lt;code&gt;&amp;quot;client[year_end_another_field_name]&amp;quot;&lt;/code&gt; as this would cause errors for certain fields to find their way on to the elements of other fields where the names share a common beginning.&lt;/p&gt;

&lt;h3&gt;Resetting Forms&lt;/h3&gt;

&lt;p&gt;We define two more helper functions that will be used when working with remote forms, one to clear all errors from the form and the other to clear all form data (which we might do when we successfully save a Client):&lt;/p&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;clear_form_errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.form-group'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;removeClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'has-error'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'span.help-block'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;clear_form_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;':input'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'#myform'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;not&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;':button, :submit, :reset, :hidden'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;removeAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'checked'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;removeAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'selected'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;With the above we now have a fairly general implementation of remote forms for our app where to fully handle validation we only need to call one helper method.&lt;/p&gt;

&lt;p&gt;In doing so we have left the controller largely untouched, and thanks to a custom form helper and Bootstrap we need need do very little to have all controls appear as they should when we need to show an error.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what the result looks like when we click submit on an empty form, thus triggering validation errors:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://stefan.haflidason.com/assets/2014/08/Screen-Shot-2014-08-18-at-16.42.21.png" alt="Bootrap Rails Form Validation" width="491" height="444" class="aligncenter size-full wp-image-784" /&gt;&lt;/p&gt;

&lt;p&gt;If you have any questions or suggestions for improvement you can &lt;a href="https://twitter.com/styrmis"&gt;drop me a line on Twitter&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Sending Emails Using Rails and Bootstrap</title>
    <link rel="alternate" href="http://blog.url.com/articles/rails/sending-emails-using-rails-and-bootstrap/"/>
    <id>http://blog.url.com/articles/rails/sending-emails-using-rails-and-bootstrap/</id>
    <published>2014-04-21T00:00:00+01:00</published>
    <updated>2015-10-10T21:31:53+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;If you&amp;rsquo;ve built your site&amp;rsquo;s look and feel using Bootstrap and you&amp;rsquo;re now looking to start sending emails with similar styling then as you are no doubt aware, email clients are generally extremely limited in their understanding of CSS in particular and so we&amp;rsquo;re going to have to do a bit of work.&lt;/p&gt;

&lt;p&gt;The topic of email HTML and CSS rendering is a complex one with an increasing number of caveats as you try to support more email clients. Some common client sins include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stripping out the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag completely.&lt;/li&gt;
&lt;li&gt;Not loading any linked stylesheets; all CSS must be inline, e.g. &lt;code&gt;&amp;lt;div style=&amp;quot;color: #444444; text-align: center;&amp;quot;&amp;gt;&lt;/code&gt; etc.&lt;/li&gt;
&lt;li&gt;Not understanding any positional CSS, instead requiring tables within tables for layout.&lt;/li&gt;
&lt;li&gt;Generally behaving like a browser in the 90&amp;rsquo;s.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We&amp;rsquo;ll use &lt;code&gt;premailer&lt;/code&gt; to convert our linked CSS declarations into inline CSS and &lt;code&gt;letter_opener_web&lt;/code&gt; to make previewing changes a little easier, then we&amp;rsquo;ll try integrating some parts of Bootstrap in using &lt;code&gt;less&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Letter Opener Web&lt;/h2&gt;

&lt;p&gt;It would be good to have a way to send emails locally, not worry about accidentally sending to a real person (e.g. a user) and preview the results easily. The &lt;code&gt;letter_opener&lt;/code&gt; gem by Ryan Bates works well for this, but it would be nicer to be able to easily browse the emails within the app rather than only rely on them launching in a browser on each send. The &lt;code&gt;letter_opener_web&lt;/code&gt; gem extends &lt;code&gt;letter_opener&lt;/code&gt; with such an interface, so let&amp;rsquo;s install it.&lt;/p&gt;

&lt;p&gt;Add to &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'letter_opener_web'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'~&amp;gt; 1.2.0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:group&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:development&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Configure in &lt;code&gt;config/environments/development.rb&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;If you want emails to open in your browser on send (using the &lt;code&gt;launchy&lt;/code&gt; gem) and be browsable via the web interface:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;action_mailer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delivery_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:letter_opener&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you only want the emails to be visible in the web interface (I prefer this):&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;action_mailer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delivery_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:letter_opener_web&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add to &lt;code&gt;config/routes.rb&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;development?&lt;/span&gt;
  &lt;span class="n"&gt;mount&lt;/span&gt; &lt;span class="no"&gt;LetterOpenerWeb&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;at: &lt;/span&gt;&lt;span class="s2"&gt;"/devel/emails"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if you visit &lt;code&gt;/devel/emails&lt;/code&gt; you should see the web interface; send some emails and they should appear here:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://stefan.haflidason.com/assets/2014/04/Screen-Shot-2014-04-21-at-15.10.50.png" alt="Screen Shot 2014-04-21 at 15.10.50" width="782" height="290" class="aligncenter size-full wp-image-684" style="border: 1px solid #444;" /&gt;&lt;/p&gt;

&lt;h2&gt;Premailer&lt;/h2&gt;

&lt;h3&gt;Installation&lt;/h3&gt;

&lt;p&gt;Add &lt;code&gt;nokogiri&lt;/code&gt; and &lt;code&gt;premailer-rails&lt;/code&gt; to your &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'nokogiri'&lt;/span&gt;
&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'premailer-rails'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(and run &lt;code&gt;bundle install&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Premailer will hook in to the email rendering process of &lt;code&gt;ActionMailer&lt;/code&gt; automatically.&lt;/p&gt;

&lt;h2&gt;Testing it Out&lt;/h2&gt;

&lt;p&gt;To test that it&amp;rsquo;s working as expected, we&amp;rsquo;ll just define a couple of simple classes in a new CSS file, &lt;code&gt;app/assets/stylesheets/emails.css.less&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.red&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.bold&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then in our email view template (&lt;code&gt;app/views/notifier/daily_summary.html.haml&lt;/code&gt;), we&amp;rsquo;ll link in the CSS file and make use of the classes:&lt;/p&gt;
&lt;pre class="highlight haml"&gt;&lt;code&gt;&lt;span class="nn"&gt;!!!
&lt;/span&gt;&lt;span class="nt"&gt;%html&lt;/span&gt;
  &lt;span class="nt"&gt;%head&lt;/span&gt;
    &lt;span class="nt"&gt;%meta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"Content-Type"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"text/html; charset=UTF-8"&lt;/span&gt;)
    &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="n"&gt;stylesheet_link_tag&lt;/span&gt; &lt;span class="s1"&gt;'emails.css'&lt;/span&gt;
  &lt;span class="nt"&gt;%body&lt;/span&gt;
    &lt;span class="nt"&gt;%p&lt;/span&gt;&lt;span class="nc"&gt;.red.bold&lt;/span&gt; A test email
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We send this email via the console:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;pry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Notifier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;daily_summary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;deliver&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the resulting &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag has the classes defined as expected, including the relevant declarations pulled in as inline styling:&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"red bold"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: red; font-weight: bold"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;A test email&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inspecting the email, we see that this is basically working, though it isn&amp;rsquo;t a proper test yet as we are using a modern browser and not an email client.&lt;/p&gt;

&lt;h2&gt;Incorporating Bootstrap&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ll assume that you already have Bootstrap incorporated into your asset pipeline using the source less files. Using SCSS would work fine too; what we want to do is to import the parts of Bootstrap that would be useful for styling our emails and this could even be achieved using static CSS, though I wouldn&amp;rsquo;t recommend it.&lt;/p&gt;

&lt;p&gt;We start by importing some Bootstrap less files into &lt;code&gt;emails.css.less&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;Core&lt;/span&gt; &lt;span class="nt"&gt;variables&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="nt"&gt;mixins&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"twitter/bootstrap/variables.less"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"twitter/bootstrap/mixins.less"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;Theme&lt;/span&gt; &lt;span class="nt"&gt;variables&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="nt"&gt;mixins&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"theme/mixins.less"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"theme/variables.less"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;Reset&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"twitter/bootstrap/normalize.less"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;Core&lt;/span&gt; &lt;span class="nt"&gt;CSS&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"twitter/bootstrap/scaffolding.less"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"twitter/bootstrap/type.less"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"twitter/bootstrap/code.less"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"twitter/bootstrap/grid.less"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"twitter/bootstrap/tables.less"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"twitter/bootstrap/forms.less"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"twitter/bootstrap/buttons.less"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;Components&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"twitter/bootstrap/labels.less"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"twitter/bootstrap/badges.less"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"twitter/bootstrap/panels.less"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;ve imported the foundational files and a few components; at this stage it isn&amp;rsquo;t clear what components are going to work with this setup, in email clients or otherwise.&lt;/p&gt;

&lt;p&gt;Then we extend our email template to make use of some Bootstrap classes:&lt;/p&gt;
&lt;pre class="highlight haml"&gt;&lt;code&gt;&lt;span class="nn"&gt;!!!
&lt;/span&gt;&lt;span class="nt"&gt;%html&lt;/span&gt;
  &lt;span class="nt"&gt;%head&lt;/span&gt;
    &lt;span class="nt"&gt;%meta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"Content-Type"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"text/html; charset=UTF-8"&lt;/span&gt;)
    &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="n"&gt;stylesheet_link_tag&lt;/span&gt; &lt;span class="s1"&gt;'emails.css'&lt;/span&gt;
  &lt;span class="nt"&gt;%body&lt;/span&gt;
    &lt;span class="nt"&gt;%h2&lt;/span&gt; Tables

    &lt;span class="nt"&gt;%table&lt;/span&gt;&lt;span class="nc"&gt;.table&lt;/span&gt;
      &lt;span class="nt"&gt;%thead&lt;/span&gt;
        &lt;span class="nt"&gt;%tr&lt;/span&gt;
          &lt;span class="nt"&gt;%th&lt;/span&gt; Column 1
          &lt;span class="nt"&gt;%th&lt;/span&gt; Column 2
      &lt;span class="nt"&gt;%tbody&lt;/span&gt;
        &lt;span class="nt"&gt;%tr&lt;/span&gt;
          &lt;span class="nt"&gt;%td&lt;/span&gt; 1 / 1
          &lt;span class="nt"&gt;%td&lt;/span&gt; 1 / 2
        &lt;span class="nt"&gt;%tr&lt;/span&gt;
          &lt;span class="nt"&gt;%td&lt;/span&gt; 2 / 1
          &lt;span class="nt"&gt;%td&lt;/span&gt; 2 / 2

    &lt;span class="nt"&gt;%h2&lt;/span&gt; Links

    &lt;span class="nt"&gt;%a&lt;/span&gt;&lt;span class="nc"&gt;.btn.btn-primary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;)
      Link Styled as Button

    &lt;span class="nt"&gt;%br&lt;/span&gt;
    &lt;span class="nt"&gt;%br&lt;/span&gt;

    &lt;span class="nt"&gt;%a&lt;/span&gt;
      Link with badge
      &lt;span class="nt"&gt;%span&lt;/span&gt;&lt;span class="nc"&gt;.badge&lt;/span&gt; 42

    &lt;span class="nt"&gt;%br&lt;/span&gt;
    &lt;span class="nt"&gt;%br&lt;/span&gt;

    &lt;span class="nt"&gt;%h2&lt;/span&gt; Panels

    &lt;span class="nc"&gt;.panel.panel-primary&lt;/span&gt;
      &lt;span class="nc"&gt;.panel-heading&lt;/span&gt;
        Panel Heading
      &lt;span class="nc"&gt;.panel-body&lt;/span&gt;
        Panel Body

        &lt;span class="nc"&gt;.label.label-primary&lt;/span&gt;
          Primary Label

        &lt;span class="nc"&gt;.label.label-warning&lt;/span&gt;
          Warning Label

        &lt;span class="nc"&gt;.label.label-danger&lt;/span&gt;
          Danger Label
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Results&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://stefan.haflidason.com/assets/2014/04/Screen-Shot-2014-04-21-at-16.32.33.png" alt="Screen Shot 2014-04-21 at 16.32.33" width="900" height="640" class="aligncenter size-full wp-image-694" /&gt;&lt;/p&gt;

&lt;p&gt;Some components simply aren&amp;rsquo;t going to work at all, so I&amp;rsquo;m expecting that the main benefit will be access to variables and mixins. This will help reduce code duplication and it won&amp;rsquo;t add quite as much weight as including the rest of the framework, so overall I would recommend getting as much mileage from simple HTML/CSS and the variables/mixins before spending too much time trying to get components to render properly.&lt;/p&gt;

&lt;p&gt;Trying the resulting HTML in various email clients (via &lt;a href="https://litmus.com/pub/d831ecc"&gt;Litmus&lt;/a&gt;) results in reasonable results for a first attempt; some clients are nearly there, though some are quite broken. With tweaking this may be viable, though the recommendation to not spend too much time on the components still stands.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://litmus.com/pub/d831ecc" target="_blank"&gt;&lt;img src="http://stefan.haflidason.com/assets/2014/04/Screen-Shot-2014-04-21-at-16.49.37.png" alt="Screen Shot 2014-04-21 at 16.49.37" width="939" height="448" class="aligncenter size-full wp-image-695" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to get going quickly I&amp;rsquo;ll be starting with one of the battle-tested templates that &lt;a href="https://github.com/mailchimp/email-blueprints"&gt;Mailchimp has open sourced&lt;/a&gt;. From there it will simply be a case of carefully linking up the Bootstrap style variables (e.g. colours) with the provided HTML. As long as no drastic changes are introduced, and the automatic inlining done by Premailer doesn&amp;rsquo;t break anything, then we should get widely-compatible email templates for our Rails app with a relatively small time investment.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Don't Set Goals—Create Systems</title>
    <link rel="alternate" href="http://blog.url.com/articles/life/dont-set-goals-create-systems/"/>
    <id>http://blog.url.com/articles/life/dont-set-goals-create-systems/</id>
    <published>2013-10-15T00:00:00+01:00</published>
    <updated>2015-10-10T20:36:50+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Cartoonists are an interesting lot: they have a job that many would see as being unproductive or even pointless, but since when did being incisive become unproductive?&lt;/p&gt;

&lt;p&gt;Bill Watterson&amp;rsquo;s insights on life as expressed through Calvin and Hobbes have entertained and helped millions. If you haven&amp;rsquo;t seen &lt;a href="http://zenpencils.com/comic/128-bill-watterson-a-cartoonists-advice/" target="_blank"&gt;this bit of tribute art&lt;/a&gt;, where a fan has drawn artwork to accompany the text of a speech by Bill then I highly recommend you take a look now. If you&amp;rsquo;re working from home and you&amp;rsquo;re the kind of person who wants to put family first then you may find its message particularly comforting.&lt;/p&gt;

&lt;p&gt;When it comes to business we have Scott Adams, creator of Dilbert. The cartoon itself will make you chuckle but Adams also shares many insights from his long and varied career in his writings. In &lt;a href="http://online.wsj.com/article/SB10001424052702304626104579121813075903866.html" target="_blank"&gt;this article for the Wall Street Journal&lt;/a&gt; he makes two strong recommendations:
&lt;ol&gt;
  &lt;li&gt;&lt;span style="line-height: 14px;"&gt;Don&amp;rsquo;t set goals, create systems instead.&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;Do not follow your passion.&lt;/li&gt;
&lt;/ol&gt;
Both of these ideas resonated strongly with me: on creating systems instead of setting goals I created &lt;a href="http://q2.io" target="_blank"&gt;Q2&lt;/a&gt; which is my system for getting the important things in life done without setting rigid goals. Adams urges us to stop setting rigid goals such as &amp;ldquo;lose 10 pounds&amp;rdquo; for two key reasons:
&lt;ol&gt;
  &lt;li&gt;&lt;span style="line-height: 14px;"&gt;As soon as you have set the goal, you&amp;rsquo;re instantly in a state of failure, as naturally you&amp;rsquo;ve made no progress towards the goal yet.&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;Once you lose those 10 pounds, then what? You have just lost your purpose; you could set yourself another goal but now moments after achieving your goal you&amp;rsquo;ve plunged yourself right back into a state of failure, again at 0% progress towards this new goal.&lt;/li&gt;
&lt;/ol&gt;
To this I would add that any lapses in progress can completely kill your enthusiasm and energy to work towards this goal. Say if you lose 8 pounds and you&amp;rsquo;re feeling great but then you attend a friend&amp;rsquo;s wedding, you enjoy the celebrations with everyone but then discover that you&amp;rsquo;ve just gained back 5 pounds, you&amp;rsquo;ll naturally feel like more of a failure and may just abandon the goal as hopeless.&lt;/p&gt;

&lt;p&gt;This could also happen at a larger scale, say with a business venture. At the first major setback you may be so disheartened that you either quit straight away or otherwise lose your momentum and the venture fizzles out.&lt;/p&gt;

&lt;p&gt;One way to get around this is to build systems that move you in the right direction. Setbacks are less important now as you aren&amp;rsquo;t fixated on a particular inflexible goal but rather a direction: stray away from that path and all you need to succeed today is to nudge yourself back towards that path. Keep doing that consistently and not only are you far more likely to succeed in your endeavour but you&amp;rsquo;re going to be generating a lot less negativity when you hit the inevitable setbacks that life will throw your way.&lt;/p&gt;

&lt;p&gt;System may be slightly too big a word though; what we are looking for is just a bit more structure in our lives and some routines that help us through the week and keep us on the right track. Such systems/routines could be as simple as:
&lt;ul&gt;
  &lt;li&gt;&lt;span style="line-height: 14px;"&gt;Reserving the first hour of each day for the activity you absolutely want to get done each day. For me at the moment this is writing, in the past it has been exercise; that time right after breakfast when you&amp;rsquo;ve got your first coffee of the day may well be the most productive part of your day and starting the day with a quick win (1,000 words written, a run) means that no matter what happens that day you&amp;#39;ve already taken a step in the right direction.&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;Setting up delivery of the most basic groceries that you always need; if you sometimes skip breakfast because you suddenly find there&amp;rsquo;s no milk for your cereal or you pick up fast food because you&amp;rsquo;re out of pasta then this is one way to avoid this happening. Also if you always have fresh fruit and vegetables to hand then you&amp;rsquo;re far more likely to eat them on a regular basis and avoid the junk.&lt;/li&gt;
  &lt;li&gt;Buy people presents throughout the year. If you see something that you know a friend or family member would love, but their birthday isn&amp;rsquo;t for another 8 months, just buy it anyway and put it in a cupboard: you wouldn&amp;rsquo;t believe how much time this saves and the gifts are likely to be appreciated more than something you hunted out at the last minute.
&lt;ul&gt;
  &lt;li&gt;As I travel quite a lot I&amp;rsquo;ve stopped doing this but in doing so have discovered something more powerful: when your friends and family are talking about how badly they want something, open up Evernote and add it to your presents note, where under each person&amp;rsquo;s name you put a list of things that they&amp;rsquo;ve been talking about wanting. When their birthday or Christmas comes around, if they haven&amp;rsquo;t bought it for themselves then give it to them and they&amp;rsquo;ll think you might be psychic. In truth, you&amp;rsquo;re just paying attention which is a nice gift to give to anyone.&lt;/li&gt;
  &lt;li&gt;Another one is, when you go out and buy someone a birthday card, buy several cards that you like. Years back I used to just pop out to a gallery that was close by that had a good selection of cards, after all it&amp;rsquo;s only a 10 minute walk, but overall it would take 30-40 minutes in total and a couple of weeks later I&amp;rsquo;d be off again, for someone else&amp;rsquo;s birthday. So now every time I&amp;rsquo;m somewhere with a beautiful selection of cards (e.g. places like Kamakura and Kyoto in Japan, or a gallery in London) then I&amp;rsquo;ll stock up and so when it comes to birthdays it&amp;rsquo;s just a case of picking the one that best suits that person.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
  &lt;li&gt;Get into the habit of keeping notes in a structured way. I use &lt;a href="http://simplenote.com" target="_blank"&gt;Simplenote&lt;/a&gt; which syncs perfectly across my Mac and my iPhone, this is where I:
&lt;ul&gt;
  &lt;li&gt;Jot down ideas as they occur to me; if you start to write down all the ideas that you have as they occur to you, you will be amazed at the trove of ideas you will generate throughout the year.&lt;/li&gt;
  &lt;li&gt;The same goes for writing ideas, if you&amp;rsquo;re taking a walk and something interesting occurs to you that you would like to explore more then note it down and when it comes to your morning writing session you&amp;rsquo;ll never be stuck for a topic to write about.&lt;/li&gt;
  &lt;li&gt;Films to watch: as people recommend films to you or you see a poster or review, note down the name. Then when you find yourself renting a DVD in a store like Tsutaya in Japan then you are spared their near-useless methods of presentation.&lt;/li&gt;
  &lt;li&gt;Once in a while, keep a log of negative thoughts as they occur to you; the patterns that emerge may be quite startling and give you an obvious lead on which problems to tackle first.&lt;/li&gt;
  &lt;li&gt;If you have children or nieces/nephews, I&amp;rsquo;d recommend getting into the habit of jotting down the stories you tell people as they say their first words and do all sorts of funny and cute things; over time it will develop into a real treasure trove of memories that you might otherwise not quite remember. If the memory is yours alone and you forget it, you wouldn&amp;rsquo;t even know that you had forgotten it; regular writing of this kind may give you quite a shock regarding how much you would have forgotten otherwise.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
  &lt;li&gt;Build and maintain swipe files:
&lt;ul&gt;
  &lt;li&gt;When you see web site designs that you like clip them into Evernote and write a quick sentence about it. Later when you are designing your own sites you can draw inspiration (don&amp;rsquo;t copy!) from them, or if you&amp;rsquo;re working with a designer you have examples of roughly what you&amp;rsquo;re aiming for to hand. If you have ever been trying to search for a page you saw a few months back with a design that you really liked then this will not only save you time but will help you to combine design elements and techniques from disparate sources that will improve your own designs.&lt;/li&gt;
  &lt;li&gt;Gather quotes that you find inspirational, not just from famous people but from anyone and anywhere; if you found it inspirational then it is worth keeping and the collection may be of use to others. This is somewhat akin to what Tim Church has done with his site &lt;a href="http://minimotivation.com" target="_blank"&gt;Mini Motivation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
Admittedly the line can be blurry between what is a goal and what is a system: writing 1,000 words a day is basically a goal, but the structure you set up for yourself (writing first thing after breakfast) is what helps you get it done, and I would be tempted to drop the word count target and instead just focus on &amp;ldquo;turning up for work&amp;rdquo;: if you sit down after breakfast and start writing, and keep doing that consistently, then some days you will write much more than 1,000 words, others less, it doesn&amp;rsquo;t matter as you&amp;rsquo;re headed in the right direction.&lt;/p&gt;

&lt;p&gt;Goals also bring more guilt into your life. This may be perfectly manageable if your only goal is to get in shape, but you probably have goals in your working life, regarding your family, your hobbies&amp;hellip; keeping on top of all of these all the time is a near-impossibility, and focussing on one naturally de-emphasises the others to the point that you start to forget that you even made the commitment to yourself in the first place which causes further remorse.&lt;/p&gt;

&lt;p&gt;One solution to this is to build one habit at a time, at a rate of no more than one a month. This month you&amp;rsquo;ll go running every morning until it&amp;rsquo;s more natural for you to go running than to not. Next month you&amp;rsquo;ll get into writing every day, the following month it will be something else.&lt;/p&gt;

&lt;p&gt;The solution I prefer is to track when I give time to these important things in my life and use a system to see at a glance which parts I&amp;rsquo;ve been neglecting, and perhaps which activities I am over-committing on, to the detriment of other dimensions of life. No one wants to live like a robot, lapsing is inevitable and shouldn&amp;rsquo;t be a cause of guilt. Rather, you just pick one of these activities and spend some time on it. Such systems shouldn&amp;rsquo;t be telling you what to do each day, they should just be supporting you, making it easy to make each day productive without the guilt trip that you get as your calendar is spamming you with notifications and your &amp;lsquo;due&amp;rsquo; todo list is an ever-growing mountain of things you should apparently be doing but aren&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;If you like the idea of a general system which is designed to be low-guilt yet high impact then &lt;a href="http://q2-io.herokuapp.com" target="_blank"&gt;I&amp;rsquo;d like you to try Q2&lt;/a&gt; and let me know what you think, and how you get on with it.&lt;/p&gt;

&lt;p&gt;And if you have some systems that you&amp;rsquo;ve built into your life that help you be more effective, or simply spend more time on what&amp;rsquo;s important, then &lt;a href="mailto:styrmis@gmail.com"&gt;I&amp;rsquo;d love to hear about them&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
</feed>
